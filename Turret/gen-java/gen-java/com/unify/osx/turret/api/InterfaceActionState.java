/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.unify.osx.turret.api;

/**
 * Contains information about an interface action's state and the texts displayed on its button
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2023-09-29")
public class InterfaceActionState implements org.apache.thrift.TBase<InterfaceActionState, InterfaceActionState._Fields>, java.io.Serializable, Cloneable, Comparable<InterfaceActionState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterfaceActionState");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LABEL_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("labelText", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FIRST_LINE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("firstLineText", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SECOND_LINE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("secondLineText", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InterfaceActionStateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InterfaceActionStateTupleSchemeFactory();

  /**
   * The state of the ring transfer
   * 
   * @see InterfaceActionStateValue
   */
  public @org.apache.thrift.annotation.Nullable InterfaceActionStateValue state; // required
  /**
   * The overriding text for 'label'.
   * Overriding means that it is an empty string in case of default text.
   * It is optional only when used in setInterfaceActionState.
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String labelText; // optional
  /**
   * The text displayed on the first line.
   * Overriding means that it is an empty string in case of default text.
   * It is optional only when used in setInterfaceActionState.
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String firstLineText; // optional
  /**
   * The text displayed on the second line.
   * Overriding means that it is an empty string in case of default text.
   * It is optional only when used in setInterfaceActionState.
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String secondLineText; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The state of the ring transfer
     * 
     * @see InterfaceActionStateValue
     */
    STATE((short)1, "state"),
    /**
     * The overriding text for 'label'.
     * Overriding means that it is an empty string in case of default text.
     * It is optional only when used in setInterfaceActionState.
     */
    LABEL_TEXT((short)2, "labelText"),
    /**
     * The text displayed on the first line.
     * Overriding means that it is an empty string in case of default text.
     * It is optional only when used in setInterfaceActionState.
     */
    FIRST_LINE_TEXT((short)3, "firstLineText"),
    /**
     * The text displayed on the second line.
     * Overriding means that it is an empty string in case of default text.
     * It is optional only when used in setInterfaceActionState.
     */
    SECOND_LINE_TEXT((short)4, "secondLineText");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // LABEL_TEXT
          return LABEL_TEXT;
        case 3: // FIRST_LINE_TEXT
          return FIRST_LINE_TEXT;
        case 4: // SECOND_LINE_TEXT
          return SECOND_LINE_TEXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LABEL_TEXT,_Fields.FIRST_LINE_TEXT,_Fields.SECOND_LINE_TEXT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, InterfaceActionStateValue.class)));
    tmpMap.put(_Fields.LABEL_TEXT, new org.apache.thrift.meta_data.FieldMetaData("labelText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRST_LINE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("firstLineText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECOND_LINE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("secondLineText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InterfaceActionState.class, metaDataMap);
  }

  public InterfaceActionState() {
  }

  public InterfaceActionState(
    InterfaceActionStateValue state)
  {
    this();
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InterfaceActionState(InterfaceActionState other) {
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetLabelText()) {
      this.labelText = other.labelText;
    }
    if (other.isSetFirstLineText()) {
      this.firstLineText = other.firstLineText;
    }
    if (other.isSetSecondLineText()) {
      this.secondLineText = other.secondLineText;
    }
  }

  @Override
  public InterfaceActionState deepCopy() {
    return new InterfaceActionState(this);
  }

  @Override
  public void clear() {
    this.state = null;
    this.labelText = null;
    this.firstLineText = null;
    this.secondLineText = null;
  }

  /**
   * The state of the ring transfer
   * 
   * @see InterfaceActionStateValue
   */
  @org.apache.thrift.annotation.Nullable
  public InterfaceActionStateValue getState() {
    return this.state;
  }

  /**
   * The state of the ring transfer
   * 
   * @see InterfaceActionStateValue
   */
  public InterfaceActionState setState(@org.apache.thrift.annotation.Nullable InterfaceActionStateValue state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  /**
   * The overriding text for 'label'.
   * Overriding means that it is an empty string in case of default text.
   * It is optional only when used in setInterfaceActionState.
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLabelText() {
    return this.labelText;
  }

  /**
   * The overriding text for 'label'.
   * Overriding means that it is an empty string in case of default text.
   * It is optional only when used in setInterfaceActionState.
   */
  public InterfaceActionState setLabelText(@org.apache.thrift.annotation.Nullable java.lang.String labelText) {
    this.labelText = labelText;
    return this;
  }

  public void unsetLabelText() {
    this.labelText = null;
  }

  /** Returns true if field labelText is set (has been assigned a value) and false otherwise */
  public boolean isSetLabelText() {
    return this.labelText != null;
  }

  public void setLabelTextIsSet(boolean value) {
    if (!value) {
      this.labelText = null;
    }
  }

  /**
   * The text displayed on the first line.
   * Overriding means that it is an empty string in case of default text.
   * It is optional only when used in setInterfaceActionState.
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFirstLineText() {
    return this.firstLineText;
  }

  /**
   * The text displayed on the first line.
   * Overriding means that it is an empty string in case of default text.
   * It is optional only when used in setInterfaceActionState.
   */
  public InterfaceActionState setFirstLineText(@org.apache.thrift.annotation.Nullable java.lang.String firstLineText) {
    this.firstLineText = firstLineText;
    return this;
  }

  public void unsetFirstLineText() {
    this.firstLineText = null;
  }

  /** Returns true if field firstLineText is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstLineText() {
    return this.firstLineText != null;
  }

  public void setFirstLineTextIsSet(boolean value) {
    if (!value) {
      this.firstLineText = null;
    }
  }

  /**
   * The text displayed on the second line.
   * Overriding means that it is an empty string in case of default text.
   * It is optional only when used in setInterfaceActionState.
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSecondLineText() {
    return this.secondLineText;
  }

  /**
   * The text displayed on the second line.
   * Overriding means that it is an empty string in case of default text.
   * It is optional only when used in setInterfaceActionState.
   */
  public InterfaceActionState setSecondLineText(@org.apache.thrift.annotation.Nullable java.lang.String secondLineText) {
    this.secondLineText = secondLineText;
    return this;
  }

  public void unsetSecondLineText() {
    this.secondLineText = null;
  }

  /** Returns true if field secondLineText is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondLineText() {
    return this.secondLineText != null;
  }

  public void setSecondLineTextIsSet(boolean value) {
    if (!value) {
      this.secondLineText = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((InterfaceActionStateValue)value);
      }
      break;

    case LABEL_TEXT:
      if (value == null) {
        unsetLabelText();
      } else {
        setLabelText((java.lang.String)value);
      }
      break;

    case FIRST_LINE_TEXT:
      if (value == null) {
        unsetFirstLineText();
      } else {
        setFirstLineText((java.lang.String)value);
      }
      break;

    case SECOND_LINE_TEXT:
      if (value == null) {
        unsetSecondLineText();
      } else {
        setSecondLineText((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return getState();

    case LABEL_TEXT:
      return getLabelText();

    case FIRST_LINE_TEXT:
      return getFirstLineText();

    case SECOND_LINE_TEXT:
      return getSecondLineText();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case LABEL_TEXT:
      return isSetLabelText();
    case FIRST_LINE_TEXT:
      return isSetFirstLineText();
    case SECOND_LINE_TEXT:
      return isSetSecondLineText();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof InterfaceActionState)
      return this.equals((InterfaceActionState)that);
    return false;
  }

  public boolean equals(InterfaceActionState that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_labelText = true && this.isSetLabelText();
    boolean that_present_labelText = true && that.isSetLabelText();
    if (this_present_labelText || that_present_labelText) {
      if (!(this_present_labelText && that_present_labelText))
        return false;
      if (!this.labelText.equals(that.labelText))
        return false;
    }

    boolean this_present_firstLineText = true && this.isSetFirstLineText();
    boolean that_present_firstLineText = true && that.isSetFirstLineText();
    if (this_present_firstLineText || that_present_firstLineText) {
      if (!(this_present_firstLineText && that_present_firstLineText))
        return false;
      if (!this.firstLineText.equals(that.firstLineText))
        return false;
    }

    boolean this_present_secondLineText = true && this.isSetSecondLineText();
    boolean that_present_secondLineText = true && that.isSetSecondLineText();
    if (this_present_secondLineText || that_present_secondLineText) {
      if (!(this_present_secondLineText && that_present_secondLineText))
        return false;
      if (!this.secondLineText.equals(that.secondLineText))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.getValue();

    hashCode = hashCode * 8191 + ((isSetLabelText()) ? 131071 : 524287);
    if (isSetLabelText())
      hashCode = hashCode * 8191 + labelText.hashCode();

    hashCode = hashCode * 8191 + ((isSetFirstLineText()) ? 131071 : 524287);
    if (isSetFirstLineText())
      hashCode = hashCode * 8191 + firstLineText.hashCode();

    hashCode = hashCode * 8191 + ((isSetSecondLineText()) ? 131071 : 524287);
    if (isSetSecondLineText())
      hashCode = hashCode * 8191 + secondLineText.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(InterfaceActionState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLabelText(), other.isSetLabelText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabelText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labelText, other.labelText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFirstLineText(), other.isSetFirstLineText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstLineText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstLineText, other.firstLineText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSecondLineText(), other.isSetSecondLineText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondLineText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondLineText, other.secondLineText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("InterfaceActionState(");
    boolean first = true;

    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (isSetLabelText()) {
      if (!first) sb.append(", ");
      sb.append("labelText:");
      if (this.labelText == null) {
        sb.append("null");
      } else {
        sb.append(this.labelText);
      }
      first = false;
    }
    if (isSetFirstLineText()) {
      if (!first) sb.append(", ");
      sb.append("firstLineText:");
      if (this.firstLineText == null) {
        sb.append("null");
      } else {
        sb.append(this.firstLineText);
      }
      first = false;
    }
    if (isSetSecondLineText()) {
      if (!first) sb.append(", ");
      sb.append("secondLineText:");
      if (this.secondLineText == null) {
        sb.append("null");
      } else {
        sb.append(this.secondLineText);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (state == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'state' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InterfaceActionStateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public InterfaceActionStateStandardScheme getScheme() {
      return new InterfaceActionStateStandardScheme();
    }
  }

  private static class InterfaceActionStateStandardScheme extends org.apache.thrift.scheme.StandardScheme<InterfaceActionState> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, InterfaceActionState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = com.unify.osx.turret.api.InterfaceActionStateValue.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LABEL_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.labelText = iprot.readString();
              struct.setLabelTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIRST_LINE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstLineText = iprot.readString();
              struct.setFirstLineTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SECOND_LINE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secondLineText = iprot.readString();
              struct.setSecondLineTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, InterfaceActionState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.labelText != null) {
        if (struct.isSetLabelText()) {
          oprot.writeFieldBegin(LABEL_TEXT_FIELD_DESC);
          oprot.writeString(struct.labelText);
          oprot.writeFieldEnd();
        }
      }
      if (struct.firstLineText != null) {
        if (struct.isSetFirstLineText()) {
          oprot.writeFieldBegin(FIRST_LINE_TEXT_FIELD_DESC);
          oprot.writeString(struct.firstLineText);
          oprot.writeFieldEnd();
        }
      }
      if (struct.secondLineText != null) {
        if (struct.isSetSecondLineText()) {
          oprot.writeFieldBegin(SECOND_LINE_TEXT_FIELD_DESC);
          oprot.writeString(struct.secondLineText);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InterfaceActionStateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public InterfaceActionStateTupleScheme getScheme() {
      return new InterfaceActionStateTupleScheme();
    }
  }

  private static class InterfaceActionStateTupleScheme extends org.apache.thrift.scheme.TupleScheme<InterfaceActionState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InterfaceActionState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.state.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLabelText()) {
        optionals.set(0);
      }
      if (struct.isSetFirstLineText()) {
        optionals.set(1);
      }
      if (struct.isSetSecondLineText()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLabelText()) {
        oprot.writeString(struct.labelText);
      }
      if (struct.isSetFirstLineText()) {
        oprot.writeString(struct.firstLineText);
      }
      if (struct.isSetSecondLineText()) {
        oprot.writeString(struct.secondLineText);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InterfaceActionState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.state = com.unify.osx.turret.api.InterfaceActionStateValue.findByValue(iprot.readI32());
      struct.setStateIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.labelText = iprot.readString();
        struct.setLabelTextIsSet(true);
      }
      if (incoming.get(1)) {
        struct.firstLineText = iprot.readString();
        struct.setFirstLineTextIsSet(true);
      }
      if (incoming.get(2)) {
        struct.secondLineText = iprot.readString();
        struct.setSecondLineTextIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

