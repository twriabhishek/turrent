/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.unify.osx.turret.api;

/**
 * Contains information regarding calls.
 * 
 *    **Note:** The GUI shows this information in the following way:
 *    #. if :thrift:struct_field:`TurretApi.CallData.contactName` is not empty, then it is displayed.
 *    #. if :thrift:struct_field:`TurretApi.CallData.partyName` is not empty, then ``"{partyNumber} {partyName}"`` is displayed.
 *    #. in other cases, the :thrift:struct_field:`TurretApi.CallData.partyNumber` is diplayed.
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2023-09-29")
public class CallData implements org.apache.thrift.TBase<CallData, CallData._Fields>, java.io.Serializable, Cloneable, Comparable<CallData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CallData");

  private static final org.apache.thrift.protocol.TField LINE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lineName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARTY_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("partyNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("partyName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTACT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contactName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("callId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("active", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CallDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CallDataTupleSchemeFactory();

  /**
   * Name of the line the call is initiated from.
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String lineName; // required
  /**
   * Number of the other party.
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String partyNumber; // required
  /**
   * Name of the other party as provided by the PBX, encoded in UTF-8.
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String partyName; // required
  /**
   * Name of the other party resolved from the contact list, encoded in UTF-8.
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String contactName; // required
  /**
   * Identifier of the call, unique in the context of the line.
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String callId; // required
  /**
   * `true` if this call is active on the line (i.e. it is not in the background in case of consultation)
   */
  public boolean active; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Name of the line the call is initiated from.
     */
    LINE_NAME((short)1, "lineName"),
    /**
     * Number of the other party.
     */
    PARTY_NUMBER((short)2, "partyNumber"),
    /**
     * Name of the other party as provided by the PBX, encoded in UTF-8.
     */
    PARTY_NAME((short)3, "partyName"),
    /**
     * Name of the other party resolved from the contact list, encoded in UTF-8.
     */
    CONTACT_NAME((short)4, "contactName"),
    /**
     * Identifier of the call, unique in the context of the line.
     */
    CALL_ID((short)5, "callId"),
    /**
     * `true` if this call is active on the line (i.e. it is not in the background in case of consultation)
     */
    ACTIVE((short)6, "active");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LINE_NAME
          return LINE_NAME;
        case 2: // PARTY_NUMBER
          return PARTY_NUMBER;
        case 3: // PARTY_NAME
          return PARTY_NAME;
        case 4: // CONTACT_NAME
          return CONTACT_NAME;
        case 5: // CALL_ID
          return CALL_ID;
        case 6: // ACTIVE
          return ACTIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTIVE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LINE_NAME, new org.apache.thrift.meta_data.FieldMetaData("lineName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "LineName")));
    tmpMap.put(_Fields.PARTY_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("partyNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("partyName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT_NAME, new org.apache.thrift.meta_data.FieldMetaData("contactName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALL_ID, new org.apache.thrift.meta_data.FieldMetaData("callId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("active", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CallData.class, metaDataMap);
  }

  public CallData() {
  }

  public CallData(
    java.lang.String lineName,
    java.lang.String partyNumber,
    java.lang.String partyName,
    java.lang.String contactName,
    java.lang.String callId,
    boolean active)
  {
    this();
    this.lineName = lineName;
    this.partyNumber = partyNumber;
    this.partyName = partyName;
    this.contactName = contactName;
    this.callId = callId;
    this.active = active;
    setActiveIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CallData(CallData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLineName()) {
      this.lineName = other.lineName;
    }
    if (other.isSetPartyNumber()) {
      this.partyNumber = other.partyNumber;
    }
    if (other.isSetPartyName()) {
      this.partyName = other.partyName;
    }
    if (other.isSetContactName()) {
      this.contactName = other.contactName;
    }
    if (other.isSetCallId()) {
      this.callId = other.callId;
    }
    this.active = other.active;
  }

  @Override
  public CallData deepCopy() {
    return new CallData(this);
  }

  @Override
  public void clear() {
    this.lineName = null;
    this.partyNumber = null;
    this.partyName = null;
    this.contactName = null;
    this.callId = null;
    setActiveIsSet(false);
    this.active = false;
  }

  /**
   * Name of the line the call is initiated from.
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLineName() {
    return this.lineName;
  }

  /**
   * Name of the line the call is initiated from.
   */
  public CallData setLineName(@org.apache.thrift.annotation.Nullable java.lang.String lineName) {
    this.lineName = lineName;
    return this;
  }

  public void unsetLineName() {
    this.lineName = null;
  }

  /** Returns true if field lineName is set (has been assigned a value) and false otherwise */
  public boolean isSetLineName() {
    return this.lineName != null;
  }

  public void setLineNameIsSet(boolean value) {
    if (!value) {
      this.lineName = null;
    }
  }

  /**
   * Number of the other party.
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartyNumber() {
    return this.partyNumber;
  }

  /**
   * Number of the other party.
   */
  public CallData setPartyNumber(@org.apache.thrift.annotation.Nullable java.lang.String partyNumber) {
    this.partyNumber = partyNumber;
    return this;
  }

  public void unsetPartyNumber() {
    this.partyNumber = null;
  }

  /** Returns true if field partyNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPartyNumber() {
    return this.partyNumber != null;
  }

  public void setPartyNumberIsSet(boolean value) {
    if (!value) {
      this.partyNumber = null;
    }
  }

  /**
   * Name of the other party as provided by the PBX, encoded in UTF-8.
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartyName() {
    return this.partyName;
  }

  /**
   * Name of the other party as provided by the PBX, encoded in UTF-8.
   */
  public CallData setPartyName(@org.apache.thrift.annotation.Nullable java.lang.String partyName) {
    this.partyName = partyName;
    return this;
  }

  public void unsetPartyName() {
    this.partyName = null;
  }

  /** Returns true if field partyName is set (has been assigned a value) and false otherwise */
  public boolean isSetPartyName() {
    return this.partyName != null;
  }

  public void setPartyNameIsSet(boolean value) {
    if (!value) {
      this.partyName = null;
    }
  }

  /**
   * Name of the other party resolved from the contact list, encoded in UTF-8.
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getContactName() {
    return this.contactName;
  }

  /**
   * Name of the other party resolved from the contact list, encoded in UTF-8.
   */
  public CallData setContactName(@org.apache.thrift.annotation.Nullable java.lang.String contactName) {
    this.contactName = contactName;
    return this;
  }

  public void unsetContactName() {
    this.contactName = null;
  }

  /** Returns true if field contactName is set (has been assigned a value) and false otherwise */
  public boolean isSetContactName() {
    return this.contactName != null;
  }

  public void setContactNameIsSet(boolean value) {
    if (!value) {
      this.contactName = null;
    }
  }

  /**
   * Identifier of the call, unique in the context of the line.
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCallId() {
    return this.callId;
  }

  /**
   * Identifier of the call, unique in the context of the line.
   */
  public CallData setCallId(@org.apache.thrift.annotation.Nullable java.lang.String callId) {
    this.callId = callId;
    return this;
  }

  public void unsetCallId() {
    this.callId = null;
  }

  /** Returns true if field callId is set (has been assigned a value) and false otherwise */
  public boolean isSetCallId() {
    return this.callId != null;
  }

  public void setCallIdIsSet(boolean value) {
    if (!value) {
      this.callId = null;
    }
  }

  /**
   * `true` if this call is active on the line (i.e. it is not in the background in case of consultation)
   */
  public boolean isActive() {
    return this.active;
  }

  /**
   * `true` if this call is active on the line (i.e. it is not in the background in case of consultation)
   */
  public CallData setActive(boolean active) {
    this.active = active;
    setActiveIsSet(true);
    return this;
  }

  public void unsetActive() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  /** Returns true if field active is set (has been assigned a value) and false otherwise */
  public boolean isSetActive() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  public void setActiveIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTIVE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LINE_NAME:
      if (value == null) {
        unsetLineName();
      } else {
        setLineName((java.lang.String)value);
      }
      break;

    case PARTY_NUMBER:
      if (value == null) {
        unsetPartyNumber();
      } else {
        setPartyNumber((java.lang.String)value);
      }
      break;

    case PARTY_NAME:
      if (value == null) {
        unsetPartyName();
      } else {
        setPartyName((java.lang.String)value);
      }
      break;

    case CONTACT_NAME:
      if (value == null) {
        unsetContactName();
      } else {
        setContactName((java.lang.String)value);
      }
      break;

    case CALL_ID:
      if (value == null) {
        unsetCallId();
      } else {
        setCallId((java.lang.String)value);
      }
      break;

    case ACTIVE:
      if (value == null) {
        unsetActive();
      } else {
        setActive((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LINE_NAME:
      return getLineName();

    case PARTY_NUMBER:
      return getPartyNumber();

    case PARTY_NAME:
      return getPartyName();

    case CONTACT_NAME:
      return getContactName();

    case CALL_ID:
      return getCallId();

    case ACTIVE:
      return isActive();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LINE_NAME:
      return isSetLineName();
    case PARTY_NUMBER:
      return isSetPartyNumber();
    case PARTY_NAME:
      return isSetPartyName();
    case CONTACT_NAME:
      return isSetContactName();
    case CALL_ID:
      return isSetCallId();
    case ACTIVE:
      return isSetActive();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof CallData)
      return this.equals((CallData)that);
    return false;
  }

  public boolean equals(CallData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_lineName = true && this.isSetLineName();
    boolean that_present_lineName = true && that.isSetLineName();
    if (this_present_lineName || that_present_lineName) {
      if (!(this_present_lineName && that_present_lineName))
        return false;
      if (!this.lineName.equals(that.lineName))
        return false;
    }

    boolean this_present_partyNumber = true && this.isSetPartyNumber();
    boolean that_present_partyNumber = true && that.isSetPartyNumber();
    if (this_present_partyNumber || that_present_partyNumber) {
      if (!(this_present_partyNumber && that_present_partyNumber))
        return false;
      if (!this.partyNumber.equals(that.partyNumber))
        return false;
    }

    boolean this_present_partyName = true && this.isSetPartyName();
    boolean that_present_partyName = true && that.isSetPartyName();
    if (this_present_partyName || that_present_partyName) {
      if (!(this_present_partyName && that_present_partyName))
        return false;
      if (!this.partyName.equals(that.partyName))
        return false;
    }

    boolean this_present_contactName = true && this.isSetContactName();
    boolean that_present_contactName = true && that.isSetContactName();
    if (this_present_contactName || that_present_contactName) {
      if (!(this_present_contactName && that_present_contactName))
        return false;
      if (!this.contactName.equals(that.contactName))
        return false;
    }

    boolean this_present_callId = true && this.isSetCallId();
    boolean that_present_callId = true && that.isSetCallId();
    if (this_present_callId || that_present_callId) {
      if (!(this_present_callId && that_present_callId))
        return false;
      if (!this.callId.equals(that.callId))
        return false;
    }

    boolean this_present_active = true;
    boolean that_present_active = true;
    if (this_present_active || that_present_active) {
      if (!(this_present_active && that_present_active))
        return false;
      if (this.active != that.active)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLineName()) ? 131071 : 524287);
    if (isSetLineName())
      hashCode = hashCode * 8191 + lineName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartyNumber()) ? 131071 : 524287);
    if (isSetPartyNumber())
      hashCode = hashCode * 8191 + partyNumber.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartyName()) ? 131071 : 524287);
    if (isSetPartyName())
      hashCode = hashCode * 8191 + partyName.hashCode();

    hashCode = hashCode * 8191 + ((isSetContactName()) ? 131071 : 524287);
    if (isSetContactName())
      hashCode = hashCode * 8191 + contactName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCallId()) ? 131071 : 524287);
    if (isSetCallId())
      hashCode = hashCode * 8191 + callId.hashCode();

    hashCode = hashCode * 8191 + ((active) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(CallData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLineName(), other.isSetLineName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineName, other.lineName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartyNumber(), other.isSetPartyNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartyNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partyNumber, other.partyNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartyName(), other.isSetPartyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partyName, other.partyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContactName(), other.isSetContactName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactName, other.contactName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCallId(), other.isSetCallId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callId, other.callId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetActive(), other.isSetActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active, other.active);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CallData(");
    boolean first = true;

    sb.append("lineName:");
    if (this.lineName == null) {
      sb.append("null");
    } else {
      sb.append(this.lineName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partyNumber:");
    if (this.partyNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.partyNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partyName:");
    if (this.partyName == null) {
      sb.append("null");
    } else {
      sb.append(this.partyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactName:");
    if (this.contactName == null) {
      sb.append("null");
    } else {
      sb.append(this.contactName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("callId:");
    if (this.callId == null) {
      sb.append("null");
    } else {
      sb.append(this.callId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("active:");
    sb.append(this.active);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (lineName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lineName' was not present! Struct: " + toString());
    }
    if (partyNumber == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partyNumber' was not present! Struct: " + toString());
    }
    if (partyName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partyName' was not present! Struct: " + toString());
    }
    if (contactName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contactName' was not present! Struct: " + toString());
    }
    if (callId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'callId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'active' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CallDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public CallDataStandardScheme getScheme() {
      return new CallDataStandardScheme();
    }
  }

  private static class CallDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<CallData> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, CallData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LINE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lineName = iprot.readString();
              struct.setLineNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTY_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partyNumber = iprot.readString();
              struct.setPartyNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partyName = iprot.readString();
              struct.setPartyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTACT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactName = iprot.readString();
              struct.setContactNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.callId = iprot.readString();
              struct.setCallIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.active = iprot.readBool();
              struct.setActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetActive()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'active' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, CallData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lineName != null) {
        oprot.writeFieldBegin(LINE_NAME_FIELD_DESC);
        oprot.writeString(struct.lineName);
        oprot.writeFieldEnd();
      }
      if (struct.partyNumber != null) {
        oprot.writeFieldBegin(PARTY_NUMBER_FIELD_DESC);
        oprot.writeString(struct.partyNumber);
        oprot.writeFieldEnd();
      }
      if (struct.partyName != null) {
        oprot.writeFieldBegin(PARTY_NAME_FIELD_DESC);
        oprot.writeString(struct.partyName);
        oprot.writeFieldEnd();
      }
      if (struct.contactName != null) {
        oprot.writeFieldBegin(CONTACT_NAME_FIELD_DESC);
        oprot.writeString(struct.contactName);
        oprot.writeFieldEnd();
      }
      if (struct.callId != null) {
        oprot.writeFieldBegin(CALL_ID_FIELD_DESC);
        oprot.writeString(struct.callId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTIVE_FIELD_DESC);
      oprot.writeBool(struct.active);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CallDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public CallDataTupleScheme getScheme() {
      return new CallDataTupleScheme();
    }
  }

  private static class CallDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<CallData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CallData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.lineName);
      oprot.writeString(struct.partyNumber);
      oprot.writeString(struct.partyName);
      oprot.writeString(struct.contactName);
      oprot.writeString(struct.callId);
      oprot.writeBool(struct.active);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CallData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.lineName = iprot.readString();
      struct.setLineNameIsSet(true);
      struct.partyNumber = iprot.readString();
      struct.setPartyNumberIsSet(true);
      struct.partyName = iprot.readString();
      struct.setPartyNameIsSet(true);
      struct.contactName = iprot.readString();
      struct.setContactNameIsSet(true);
      struct.callId = iprot.readString();
      struct.setCallIdIsSet(true);
      struct.active = iprot.readBool();
      struct.setActiveIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

