/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.unify.osx.turret.api;

/**
 * Contains the name of a line and the composite state of the line.
 * Used for snapshots about lines, and notification about state changes of the line.
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2023-09-29")
public class LineStatesData implements org.apache.thrift.TBase<LineStatesData, LineStatesData._Fields>, java.io.Serializable, Cloneable, Comparable<LineStatesData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LineStatesData");

  private static final org.apache.thrift.protocol.TField LINE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lineName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BASIC_LINE_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("basicLineStates", org.apache.thrift.protocol.TType.SET, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LineStatesDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LineStatesDataTupleSchemeFactory();

  /**
   * Unique name of the line
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String lineName; // required
  /**
   * Set of BasicLineStates of the line (as they are not all mutually exclusive)
   */
  public @org.apache.thrift.annotation.Nullable java.util.Set<BasicLineState> basicLineStates; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Unique name of the line
     */
    LINE_NAME((short)1, "lineName"),
    /**
     * Set of BasicLineStates of the line (as they are not all mutually exclusive)
     */
    BASIC_LINE_STATES((short)2, "basicLineStates");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LINE_NAME
          return LINE_NAME;
        case 2: // BASIC_LINE_STATES
          return BASIC_LINE_STATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LINE_NAME, new org.apache.thrift.meta_data.FieldMetaData("lineName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "LineName")));
    tmpMap.put(_Fields.BASIC_LINE_STATES, new org.apache.thrift.meta_data.FieldMetaData("basicLineStates", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, BasicLineState.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LineStatesData.class, metaDataMap);
  }

  public LineStatesData() {
  }

  public LineStatesData(
    java.lang.String lineName,
    java.util.Set<BasicLineState> basicLineStates)
  {
    this();
    this.lineName = lineName;
    this.basicLineStates = basicLineStates;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LineStatesData(LineStatesData other) {
    if (other.isSetLineName()) {
      this.lineName = other.lineName;
    }
    if (other.isSetBasicLineStates()) {
      java.util.Set<BasicLineState> __this__basicLineStates = java.util.EnumSet.noneOf(BasicLineState.class);
      for (BasicLineState other_element : other.basicLineStates) {
        __this__basicLineStates.add(other_element);
      }
      this.basicLineStates = __this__basicLineStates;
    }
  }

  @Override
  public LineStatesData deepCopy() {
    return new LineStatesData(this);
  }

  @Override
  public void clear() {
    this.lineName = null;
    this.basicLineStates = null;
  }

  /**
   * Unique name of the line
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLineName() {
    return this.lineName;
  }

  /**
   * Unique name of the line
   */
  public LineStatesData setLineName(@org.apache.thrift.annotation.Nullable java.lang.String lineName) {
    this.lineName = lineName;
    return this;
  }

  public void unsetLineName() {
    this.lineName = null;
  }

  /** Returns true if field lineName is set (has been assigned a value) and false otherwise */
  public boolean isSetLineName() {
    return this.lineName != null;
  }

  public void setLineNameIsSet(boolean value) {
    if (!value) {
      this.lineName = null;
    }
  }

  public int getBasicLineStatesSize() {
    return (this.basicLineStates == null) ? 0 : this.basicLineStates.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<BasicLineState> getBasicLineStatesIterator() {
    return (this.basicLineStates == null) ? null : this.basicLineStates.iterator();
  }

  public void addToBasicLineStates(BasicLineState elem) {
    if (this.basicLineStates == null) {
      this.basicLineStates = java.util.EnumSet.noneOf(BasicLineState.class);
    }
    this.basicLineStates.add(elem);
  }

  /**
   * Set of BasicLineStates of the line (as they are not all mutually exclusive)
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Set<BasicLineState> getBasicLineStates() {
    return this.basicLineStates;
  }

  /**
   * Set of BasicLineStates of the line (as they are not all mutually exclusive)
   */
  public LineStatesData setBasicLineStates(@org.apache.thrift.annotation.Nullable java.util.Set<BasicLineState> basicLineStates) {
    this.basicLineStates = basicLineStates;
    return this;
  }

  public void unsetBasicLineStates() {
    this.basicLineStates = null;
  }

  /** Returns true if field basicLineStates is set (has been assigned a value) and false otherwise */
  public boolean isSetBasicLineStates() {
    return this.basicLineStates != null;
  }

  public void setBasicLineStatesIsSet(boolean value) {
    if (!value) {
      this.basicLineStates = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LINE_NAME:
      if (value == null) {
        unsetLineName();
      } else {
        setLineName((java.lang.String)value);
      }
      break;

    case BASIC_LINE_STATES:
      if (value == null) {
        unsetBasicLineStates();
      } else {
        setBasicLineStates((java.util.Set<BasicLineState>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LINE_NAME:
      return getLineName();

    case BASIC_LINE_STATES:
      return getBasicLineStates();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LINE_NAME:
      return isSetLineName();
    case BASIC_LINE_STATES:
      return isSetBasicLineStates();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof LineStatesData)
      return this.equals((LineStatesData)that);
    return false;
  }

  public boolean equals(LineStatesData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_lineName = true && this.isSetLineName();
    boolean that_present_lineName = true && that.isSetLineName();
    if (this_present_lineName || that_present_lineName) {
      if (!(this_present_lineName && that_present_lineName))
        return false;
      if (!this.lineName.equals(that.lineName))
        return false;
    }

    boolean this_present_basicLineStates = true && this.isSetBasicLineStates();
    boolean that_present_basicLineStates = true && that.isSetBasicLineStates();
    if (this_present_basicLineStates || that_present_basicLineStates) {
      if (!(this_present_basicLineStates && that_present_basicLineStates))
        return false;
      if (!this.basicLineStates.equals(that.basicLineStates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLineName()) ? 131071 : 524287);
    if (isSetLineName())
      hashCode = hashCode * 8191 + lineName.hashCode();

    hashCode = hashCode * 8191 + ((isSetBasicLineStates()) ? 131071 : 524287);
    if (isSetBasicLineStates())
      hashCode = hashCode * 8191 + basicLineStates.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LineStatesData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLineName(), other.isSetLineName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineName, other.lineName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBasicLineStates(), other.isSetBasicLineStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasicLineStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basicLineStates, other.basicLineStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LineStatesData(");
    boolean first = true;

    sb.append("lineName:");
    if (this.lineName == null) {
      sb.append("null");
    } else {
      sb.append(this.lineName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("basicLineStates:");
    if (this.basicLineStates == null) {
      sb.append("null");
    } else {
      sb.append(this.basicLineStates);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (lineName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lineName' was not present! Struct: " + toString());
    }
    if (basicLineStates == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'basicLineStates' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LineStatesDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public LineStatesDataStandardScheme getScheme() {
      return new LineStatesDataStandardScheme();
    }
  }

  private static class LineStatesDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<LineStatesData> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, LineStatesData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LINE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lineName = iprot.readString();
              struct.setLineNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASIC_LINE_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.basicLineStates = java.util.EnumSet.noneOf(BasicLineState.class);
                @org.apache.thrift.annotation.Nullable BasicLineState _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = com.unify.osx.turret.api.BasicLineState.findByValue(iprot.readI32());
                  if (_elem1 != null)
                  {
                    struct.basicLineStates.add(_elem1);
                  }
                }
                iprot.readSetEnd();
              }
              struct.setBasicLineStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, LineStatesData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lineName != null) {
        oprot.writeFieldBegin(LINE_NAME_FIELD_DESC);
        oprot.writeString(struct.lineName);
        oprot.writeFieldEnd();
      }
      if (struct.basicLineStates != null) {
        oprot.writeFieldBegin(BASIC_LINE_STATES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.basicLineStates.size()));
          for (BasicLineState _iter3 : struct.basicLineStates)
          {
            oprot.writeI32(_iter3.getValue());
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LineStatesDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public LineStatesDataTupleScheme getScheme() {
      return new LineStatesDataTupleScheme();
    }
  }

  private static class LineStatesDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<LineStatesData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LineStatesData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.lineName);
      {
        oprot.writeI32(struct.basicLineStates.size());
        for (BasicLineState _iter4 : struct.basicLineStates)
        {
          oprot.writeI32(_iter4.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LineStatesData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.lineName = iprot.readString();
      struct.setLineNameIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set5 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
        struct.basicLineStates = java.util.EnumSet.noneOf(BasicLineState.class);
        @org.apache.thrift.annotation.Nullable BasicLineState _elem6;
        for (int _i7 = 0; _i7 < _set5.size; ++_i7)
        {
          _elem6 = com.unify.osx.turret.api.BasicLineState.findByValue(iprot.readI32());
          if (_elem6 != null)
          {
            struct.basicLineStates.add(_elem6);
          }
        }
      }
      struct.setBasicLineStatesIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

