#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from unify.osx.turret.api import TurretNotificationService
from unify.osx.turret.api.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void onLineStatesChanged(string turretName, LineStatesData states)')
    print('  void onCallDataChanged(string turretName, LineName lineName, string partyNumber, string partyName, string contactName)')
    print('  void onCallDataChangedEx(string turretName, CallData callData)')
    print('  void onLoginStateChanged(string turretName, TurretState state)')
    print('  void onLoginResponse(string turretName, TurretErrorCode errorCode, string errorDescription)')
    print('  void onTopOfCallQueueChanged(string turretName, LineName lineName)')
    print('  void onRingTransferStateChanged(string turretName, RingTransferId id, RingTransferState state)')
    print('  void onRingTransferStateChangeError(string turretName, RingTransferId id, TurretErrorCode errorCode, string errorDescription)')
    print('  void onRingTransferSequenceStateChanged(string turretName, RingTransferId id, RingTransferSequenceState state)')
    print('  void onRingTransferSequenceStateChangeError(string turretName, RingTransferId id, TurretErrorCode errorCode, string errorDescription)')
    print('  void onInterfaceActionStateChanged(string turretName, string apiName, InterfaceActionState state)')
    print('  void onInterfaceActionKeyChanged(string turretName, string apiName, InterfaceActionKeyState keyState)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = '192.168.0.22'
port = 9007
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        print(@@@@@@@@@@@@@@@@@@@@@@@@@)
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = TurretNotificationService.Client(protocol)
transport.open()

if cmd == 'onLineStatesChanged':
    if len(args) != 2:
        print('onLineStatesChanged requires 2 args')
        sys.exit(1)
    pp.pprint(client.onLineStatesChanged(args[0], eval(args[1]),))

elif cmd == 'onCallDataChanged':
    if len(args) != 5:
        print('onCallDataChanged requires 5 args')
        sys.exit(1)
    pp.pprint(client.onCallDataChanged(args[0], eval(args[1]), args[2], args[3], args[4],))

elif cmd == 'onCallDataChangedEx':
    if len(args) != 2:
        print('onCallDataChangedEx requires 2 args')
        sys.exit(1)
    pp.pprint(client.onCallDataChangedEx(args[0], eval(args[1]),))

elif cmd == 'onLoginStateChanged':
    if len(args) != 2:
        print('onLoginStateChanged requires 2 args')
        sys.exit(1)
    pp.pprint(client.onLoginStateChanged(args[0], eval(args[1]),))

elif cmd == 'onLoginResponse':
    if len(args) != 3:
        print('onLoginResponse requires 3 args')
        sys.exit(1)
    pp.pprint(client.onLoginResponse(args[0], eval(args[1]), args[2],))

elif cmd == 'onTopOfCallQueueChanged':
    if len(args) != 2:
        print('onTopOfCallQueueChanged requires 2 args')
        sys.exit(1)
    pp.pprint(client.onTopOfCallQueueChanged(args[0], eval(args[1]),))

elif cmd == 'onRingTransferStateChanged':
    if len(args) != 3:
        print('onRingTransferStateChanged requires 3 args')
        sys.exit(1)
    pp.pprint(client.onRingTransferStateChanged(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'onRingTransferStateChangeError':
    if len(args) != 4:
        print('onRingTransferStateChangeError requires 4 args')
        sys.exit(1)
    pp.pprint(client.onRingTransferStateChangeError(args[0], eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'onRingTransferSequenceStateChanged':
    if len(args) != 3:
        print('onRingTransferSequenceStateChanged requires 3 args')
        sys.exit(1)
    pp.pprint(client.onRingTransferSequenceStateChanged(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'onRingTransferSequenceStateChangeError':
    if len(args) != 4:
        print('onRingTransferSequenceStateChangeError requires 4 args')
        sys.exit(1)
    pp.pprint(client.onRingTransferSequenceStateChangeError(args[0], eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'onInterfaceActionStateChanged':
    if len(args) != 3:
        print('onInterfaceActionStateChanged requires 3 args')
        sys.exit(1)
    pp.pprint(client.onInterfaceActionStateChanged(args[0], args[1], eval(args[2]),))

elif cmd == 'onInterfaceActionKeyChanged':
    if len(args) != 3:
        print('onInterfaceActionKeyChanged requires 3 args')
        sys.exit(1)
    pp.pprint(client.onInterfaceActionKeyChanged(args[0], args[1], eval(args[2]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
