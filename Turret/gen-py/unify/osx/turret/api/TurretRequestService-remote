#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from unify.osx.turret.api import TurretRequestService
from unify.osx.turret.api.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void requestNotifications(SubscriberInfo subscriberInfo)')
    print('   getProfileList()')
    print('  string getLoggedInProfileName()')
    print('   getSpeechUnits()')
    print('   getAvailableLines()')
    print('  LineStatesData snapshotLineRequest(LineName lineName)')
    print('   snapshotCalls()')
    print('  void login(string profileName, string password)')
    print('  void logout()')
    print('  void makeCall(SpeechUnitId suId, string number)')
    print('  void makeCallFromSpecificLine(SpeechUnitId suId, LineName lineName, string number)')
    print('  void createConsultation(SpeechUnitId suId, string number)')
    print('  void transfer(SpeechUnitId suId)')
    print('  void toggle(SpeechUnitId suId)')
    print('  void pbxConference(SpeechUnitId suId)')
    print('  void answerCall(SpeechUnitId suId)')
    print('  void answerSpecificCall(SpeechUnitId suId, LineName lineName)')
    print('  void disconnectCall(SpeechUnitId suId)')
    print('  void hold(SpeechUnitId suId)')
    print('  void commonHold(SpeechUnitId suId)')
    print('  void privateHold(SpeechUnitId suId)')
    print('  void retrieveSpecific(SpeechUnitId suId, LineName lineName)')
    print('  void dtmf(SpeechUnitId suId, i8 digit)')
    print('  TurretState getLoginState()')
    print('  string getVersion()')
    print('   getAvailableRingTransfers()')
    print('  RingTransferState snapshotRingTransfer(RingTransferId id)')
    print('  void setRingTransferActive(RingTransferId id, bool active)')
    print('   getAvailableRingtransferSequences()')
    print('  RingTransferSequenceState snapshotRingTransferSequence(RingTransferId id)')
    print('  void setRingTransferSequenceActive(RingTransferId id, bool active)')
    print('   getAvailableInterfaceActions()')
    print('  InterfaceActionState snapshotInterfaceAction(string apiName)')
    print('  void setInterfaceActionState(string apiName, InterfaceActionState state)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = '192.168.0.22'
port = 9007
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        print("++++++++++++++++++++++++")
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = TurretRequestService.Client(protocol)
transport.open()

if cmd == 'requestNotifications':
    if len(args) != 1:
        print('requestNotifications requires 1 args')
        sys.exit(1)
    pp.pprint(client.requestNotifications(eval(args[0]),))

elif cmd == 'getProfileList':
    if len(args) != 0:
        print('getProfileList requires 0 args')
        sys.exit(1)
    pp.pprint(client.getProfileList())

elif cmd == 'getLoggedInProfileName':
    if len(args) != 0:
        print('getLoggedInProfileName requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLoggedInProfileName())

elif cmd == 'getSpeechUnits':
    if len(args) != 0:
        print('getSpeechUnits requires 0 args')
        sys.exit(1)
    pp.pprint(client.getSpeechUnits())

elif cmd == 'getAvailableLines':
    if len(args) != 0:
        print('getAvailableLines requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAvailableLines())

elif cmd == 'snapshotLineRequest':
    if len(args) != 1:
        print('snapshotLineRequest requires 1 args')
        sys.exit(1)
    pp.pprint(client.snapshotLineRequest(eval(args[0]),))

elif cmd == 'snapshotCalls':
    if len(args) != 0:
        print('snapshotCalls requires 0 args')
        sys.exit(1)
    pp.pprint(client.snapshotCalls())

elif cmd == 'login':
    if len(args) != 2:
        print('login requires 2 args')
        sys.exit(1)
    pp.pprint(client.login(args[0], args[1],))

elif cmd == 'logout':
    if len(args) != 0:
        print('logout requires 0 args')
        sys.exit(1)
    pp.pprint(client.logout())

elif cmd == 'makeCall':
    if len(args) != 2:
        print('makeCall requires 2 args')
        sys.exit(1)
    pp.pprint(client.makeCall(eval(args[0]), args[1],))

elif cmd == 'makeCallFromSpecificLine':
    if len(args) != 3:
        print('makeCallFromSpecificLine requires 3 args')
        sys.exit(1)
    pp.pprint(client.makeCallFromSpecificLine(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'createConsultation':
    if len(args) != 2:
        print('createConsultation requires 2 args')
        sys.exit(1)
    pp.pprint(client.createConsultation(eval(args[0]), args[1],))

elif cmd == 'transfer':
    if len(args) != 1:
        print('transfer requires 1 args')
        sys.exit(1)
    pp.pprint(client.transfer(eval(args[0]),))

elif cmd == 'toggle':
    if len(args) != 1:
        print('toggle requires 1 args')
        sys.exit(1)
    pp.pprint(client.toggle(eval(args[0]),))

elif cmd == 'pbxConference':
    if len(args) != 1:
        print('pbxConference requires 1 args')
        sys.exit(1)
    pp.pprint(client.pbxConference(eval(args[0]),))

elif cmd == 'answerCall':
    if len(args) != 1:
        print('answerCall requires 1 args')
        sys.exit(1)
    pp.pprint(client.answerCall(eval(args[0]),))

elif cmd == 'answerSpecificCall':
    if len(args) != 2:
        print('answerSpecificCall requires 2 args')
        sys.exit(1)
    pp.pprint(client.answerSpecificCall(eval(args[0]), eval(args[1]),))

elif cmd == 'disconnectCall':
    if len(args) != 1:
        print('disconnectCall requires 1 args')
        sys.exit(1)
    pp.pprint(client.disconnectCall(eval(args[0]),))

elif cmd == 'hold':
    if len(args) != 1:
        print('hold requires 1 args')
        sys.exit(1)
    pp.pprint(client.hold(eval(args[0]),))

elif cmd == 'commonHold':
    if len(args) != 1:
        print('commonHold requires 1 args')
        sys.exit(1)
    pp.pprint(client.commonHold(eval(args[0]),))

elif cmd == 'privateHold':
    if len(args) != 1:
        print('privateHold requires 1 args')
        sys.exit(1)
    pp.pprint(client.privateHold(eval(args[0]),))

elif cmd == 'retrieveSpecific':
    if len(args) != 2:
        print('retrieveSpecific requires 2 args')
        sys.exit(1)
    pp.pprint(client.retrieveSpecific(eval(args[0]), eval(args[1]),))

elif cmd == 'dtmf':
    if len(args) != 2:
        print('dtmf requires 2 args')
        sys.exit(1)
    pp.pprint(client.dtmf(eval(args[0]), eval(args[1]),))

elif cmd == 'getLoginState':
    if len(args) != 0:
        print('getLoginState requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLoginState())

elif cmd == 'getVersion':
    if len(args) != 0:
        print('getVersion requires 0 args')
        sys.exit(1)
    pp.pprint(client.getVersion())

elif cmd == 'getAvailableRingTransfers':
    if len(args) != 0:
        print('getAvailableRingTransfers requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAvailableRingTransfers())

elif cmd == 'snapshotRingTransfer':
    if len(args) != 1:
        print('snapshotRingTransfer requires 1 args')
        sys.exit(1)
    pp.pprint(client.snapshotRingTransfer(eval(args[0]),))

elif cmd == 'setRingTransferActive':
    if len(args) != 2:
        print('setRingTransferActive requires 2 args')
        sys.exit(1)
    pp.pprint(client.setRingTransferActive(eval(args[0]), eval(args[1]),))

elif cmd == 'getAvailableRingtransferSequences':
    if len(args) != 0:
        print('getAvailableRingtransferSequences requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAvailableRingtransferSequences())

elif cmd == 'snapshotRingTransferSequence':
    if len(args) != 1:
        print('snapshotRingTransferSequence requires 1 args')
        sys.exit(1)
    pp.pprint(client.snapshotRingTransferSequence(eval(args[0]),))

elif cmd == 'setRingTransferSequenceActive':
    if len(args) != 2:
        print('setRingTransferSequenceActive requires 2 args')
        sys.exit(1)
    pp.pprint(client.setRingTransferSequenceActive(eval(args[0]), eval(args[1]),))

elif cmd == 'getAvailableInterfaceActions':
    if len(args) != 0:
        print('getAvailableInterfaceActions requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAvailableInterfaceActions())

elif cmd == 'snapshotInterfaceAction':
    if len(args) != 1:
        print('snapshotInterfaceAction requires 1 args')
        sys.exit(1)
    pp.pprint(client.snapshotInterfaceAction(args[0],))

elif cmd == 'setInterfaceActionState':
    if len(args) != 2:
        print('setInterfaceActionState requires 2 args')
        sys.exit(1)
    pp.pprint(client.setInterfaceActionState(args[0], eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
