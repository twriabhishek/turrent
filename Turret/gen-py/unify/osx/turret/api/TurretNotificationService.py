#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def onLineStatesChanged(self, turretName, states):
        """
        Notifies about the change of state of the specified line.

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - states: Contains the name and the new state of the line.

        """
        pass

    def onCallDataChanged(self, turretName, lineName, partyNumber, partyName, contactName):
        """
        .. deprecated:: V7.3.1
           Use :thrift:service_method:`TurretApi.TurretNotificationService.onCallDataChangedEx` instead.

        Notifies about the change of the possibly displayed name(s) of the line.
        Note: The turret's GUI shows this information in the following way:

            #. If ``contactName`` is not empty, then it is displayed.
            #. If ``partyName`` is not empty, then ``"{partyNumber} {partyName}"`` is displayed.
            #. In other cases, the ``partyNumber`` is diplayed.


        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - lineName: Name of the line.
         - partyNumber: Line number of the other party.
         - partyName: Name of the line as provided by the PBX, encoded in UTF-8.
         - contactName: Name of the calling party resolved from the contact list, encoded in UTF-8.

        """
        pass

    def onCallDataChangedEx(self, turretName, callData):
        """
        Notifies about the change in properties of a call.
        See :thrift:struct:`TurretApi.CallData` for the included information.

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - callData

        """
        pass

    def onLoginStateChanged(self, turretName, state):
        """
        Notifies about the login state change of the turret software.

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - state: New login state of the turret.

        """
        pass

    def onLoginResponse(self, turretName, errorCode, errorDescription):
        """
        Notifies about an error during the login process

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - errorCode: Error code (see :ref:`Constants`)
         - errorDescription: Short text description of the error

        """
        pass

    def onTopOfCallQueueChanged(self, turretName, lineName):
        """
        Notifies a new incoming call having higher priority than the ones before, or
        if all incoming calls have been removed from the call queue

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - lineName: Name of the line at the top of the call queue or an empty string if there is none.

        """
        pass

    def onRingTransferStateChanged(self, turretName, id, state):
        """
        Notifies a ring transfer state change.

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - id: Identifier of the ring transfer
         - state: The new state of the ring transfer

        """
        pass

    def onRingTransferStateChangeError(self, turretName, id, errorCode, errorDescription):
        """
        Notifies that a previous request to change the activation of a ring transfer has failed.
        (See :thrift:service_method:`TurretApi.TurretRequestService.setRingTransferActive`.)

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - id: Identifier of the ring transfer
         - errorCode: Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
         - errorDescription: Short text description of the error

        """
        pass

    def onRingTransferSequenceStateChanged(self, turretName, id, state):
        """
        Notifies a ring transfer sequence state change.

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - id: Identifier of the ring transfer sequence
         - state: The new state of the ring transfer sequence

        """
        pass

    def onRingTransferSequenceStateChangeError(self, turretName, id, errorCode, errorDescription):
        """
        Notifies that a previous request to change the activation of a ring transfer sequence has failed.
        (See :thrift:service_method:`TurretApi.TurretRequestService.setRingTransferSequenceActive`.)

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - id: Identifier of the ring transfer sequence
         - errorCode: Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
         - errorDescription: Short text description of the error

        """
        pass

    def onInterfaceActionStateChanged(self, turretName, apiName, state):
        """
        Notifies a interface action state change (including changes in the overriding texts).

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - apiName: Identifier of the interface action
         - state: The new state of the interface action

        """
        pass

    def onInterfaceActionKeyChanged(self, turretName, apiName, keyState):
        """
        Notifies an interface action key event (press/release).

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - apiName: Identifier of the interface action
         - keyState: The key event

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def onLineStatesChanged(self, turretName, states):
        """
        Notifies about the change of state of the specified line.

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - states: Contains the name and the new state of the line.

        """
        self.send_onLineStatesChanged(turretName, states)

    def send_onLineStatesChanged(self, turretName, states):
        self._oprot.writeMessageBegin('onLineStatesChanged', TMessageType.ONEWAY, self._seqid)
        args = onLineStatesChanged_args()
        args.turretName = turretName
        args.states = states
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def onCallDataChanged(self, turretName, lineName, partyNumber, partyName, contactName):
        """
        .. deprecated:: V7.3.1
           Use :thrift:service_method:`TurretApi.TurretNotificationService.onCallDataChangedEx` instead.

        Notifies about the change of the possibly displayed name(s) of the line.
        Note: The turret's GUI shows this information in the following way:

            #. If ``contactName`` is not empty, then it is displayed.
            #. If ``partyName`` is not empty, then ``"{partyNumber} {partyName}"`` is displayed.
            #. In other cases, the ``partyNumber`` is diplayed.


        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - lineName: Name of the line.
         - partyNumber: Line number of the other party.
         - partyName: Name of the line as provided by the PBX, encoded in UTF-8.
         - contactName: Name of the calling party resolved from the contact list, encoded in UTF-8.

        """
        self.send_onCallDataChanged(turretName, lineName, partyNumber, partyName, contactName)

    def send_onCallDataChanged(self, turretName, lineName, partyNumber, partyName, contactName):
        self._oprot.writeMessageBegin('onCallDataChanged', TMessageType.ONEWAY, self._seqid)
        args = onCallDataChanged_args()
        args.turretName = turretName
        args.lineName = lineName
        args.partyNumber = partyNumber
        args.partyName = partyName
        args.contactName = contactName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def onCallDataChangedEx(self, turretName, callData):
        """
        Notifies about the change in properties of a call.
        See :thrift:struct:`TurretApi.CallData` for the included information.

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - callData

        """
        self.send_onCallDataChangedEx(turretName, callData)

    def send_onCallDataChangedEx(self, turretName, callData):
        self._oprot.writeMessageBegin('onCallDataChangedEx', TMessageType.ONEWAY, self._seqid)
        args = onCallDataChangedEx_args()
        args.turretName = turretName
        args.callData = callData
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def onLoginStateChanged(self, turretName, state):
        """
        Notifies about the login state change of the turret software.

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - state: New login state of the turret.

        """
        self.send_onLoginStateChanged(turretName, state)

    def send_onLoginStateChanged(self, turretName, state):
        self._oprot.writeMessageBegin('onLoginStateChanged', TMessageType.ONEWAY, self._seqid)
        args = onLoginStateChanged_args()
        args.turretName = turretName
        args.state = state
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def onLoginResponse(self, turretName, errorCode, errorDescription):
        """
        Notifies about an error during the login process

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - errorCode: Error code (see :ref:`Constants`)
         - errorDescription: Short text description of the error

        """
        self.send_onLoginResponse(turretName, errorCode, errorDescription)

    def send_onLoginResponse(self, turretName, errorCode, errorDescription):
        self._oprot.writeMessageBegin('onLoginResponse', TMessageType.ONEWAY, self._seqid)
        args = onLoginResponse_args()
        args.turretName = turretName
        args.errorCode = errorCode
        args.errorDescription = errorDescription
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def onTopOfCallQueueChanged(self, turretName, lineName):
        """
        Notifies a new incoming call having higher priority than the ones before, or
        if all incoming calls have been removed from the call queue

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - lineName: Name of the line at the top of the call queue or an empty string if there is none.

        """
        self.send_onTopOfCallQueueChanged(turretName, lineName)

    def send_onTopOfCallQueueChanged(self, turretName, lineName):
        self._oprot.writeMessageBegin('onTopOfCallQueueChanged', TMessageType.ONEWAY, self._seqid)
        args = onTopOfCallQueueChanged_args()
        args.turretName = turretName
        args.lineName = lineName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def onRingTransferStateChanged(self, turretName, id, state):
        """
        Notifies a ring transfer state change.

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - id: Identifier of the ring transfer
         - state: The new state of the ring transfer

        """
        self.send_onRingTransferStateChanged(turretName, id, state)

    def send_onRingTransferStateChanged(self, turretName, id, state):
        self._oprot.writeMessageBegin('onRingTransferStateChanged', TMessageType.ONEWAY, self._seqid)
        args = onRingTransferStateChanged_args()
        args.turretName = turretName
        args.id = id
        args.state = state
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def onRingTransferStateChangeError(self, turretName, id, errorCode, errorDescription):
        """
        Notifies that a previous request to change the activation of a ring transfer has failed.
        (See :thrift:service_method:`TurretApi.TurretRequestService.setRingTransferActive`.)

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - id: Identifier of the ring transfer
         - errorCode: Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
         - errorDescription: Short text description of the error

        """
        self.send_onRingTransferStateChangeError(turretName, id, errorCode, errorDescription)

    def send_onRingTransferStateChangeError(self, turretName, id, errorCode, errorDescription):
        self._oprot.writeMessageBegin('onRingTransferStateChangeError', TMessageType.ONEWAY, self._seqid)
        args = onRingTransferStateChangeError_args()
        args.turretName = turretName
        args.id = id
        args.errorCode = errorCode
        args.errorDescription = errorDescription
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def onRingTransferSequenceStateChanged(self, turretName, id, state):
        """
        Notifies a ring transfer sequence state change.

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - id: Identifier of the ring transfer sequence
         - state: The new state of the ring transfer sequence

        """
        self.send_onRingTransferSequenceStateChanged(turretName, id, state)

    def send_onRingTransferSequenceStateChanged(self, turretName, id, state):
        self._oprot.writeMessageBegin('onRingTransferSequenceStateChanged', TMessageType.ONEWAY, self._seqid)
        args = onRingTransferSequenceStateChanged_args()
        args.turretName = turretName
        args.id = id
        args.state = state
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def onRingTransferSequenceStateChangeError(self, turretName, id, errorCode, errorDescription):
        """
        Notifies that a previous request to change the activation of a ring transfer sequence has failed.
        (See :thrift:service_method:`TurretApi.TurretRequestService.setRingTransferSequenceActive`.)

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - id: Identifier of the ring transfer sequence
         - errorCode: Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
         - errorDescription: Short text description of the error

        """
        self.send_onRingTransferSequenceStateChangeError(turretName, id, errorCode, errorDescription)

    def send_onRingTransferSequenceStateChangeError(self, turretName, id, errorCode, errorDescription):
        self._oprot.writeMessageBegin('onRingTransferSequenceStateChangeError', TMessageType.ONEWAY, self._seqid)
        args = onRingTransferSequenceStateChangeError_args()
        args.turretName = turretName
        args.id = id
        args.errorCode = errorCode
        args.errorDescription = errorDescription
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def onInterfaceActionStateChanged(self, turretName, apiName, state):
        """
        Notifies a interface action state change (including changes in the overriding texts).

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - apiName: Identifier of the interface action
         - state: The new state of the interface action

        """
        self.send_onInterfaceActionStateChanged(turretName, apiName, state)

    def send_onInterfaceActionStateChanged(self, turretName, apiName, state):
        self._oprot.writeMessageBegin('onInterfaceActionStateChanged', TMessageType.ONEWAY, self._seqid)
        args = onInterfaceActionStateChanged_args()
        args.turretName = turretName
        args.apiName = apiName
        args.state = state
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def onInterfaceActionKeyChanged(self, turretName, apiName, keyState):
        """
        Notifies an interface action key event (press/release).

        Parameters:
         - turretName: Identifier of the turret specified at notification subscription.
        It's an empty string if no name was specified at subscription.
         - apiName: Identifier of the interface action
         - keyState: The key event

        """
        self.send_onInterfaceActionKeyChanged(turretName, apiName, keyState)

    def send_onInterfaceActionKeyChanged(self, turretName, apiName, keyState):
        self._oprot.writeMessageBegin('onInterfaceActionKeyChanged', TMessageType.ONEWAY, self._seqid)
        args = onInterfaceActionKeyChanged_args()
        args.turretName = turretName
        args.apiName = apiName
        args.keyState = keyState
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["onLineStatesChanged"] = Processor.process_onLineStatesChanged
        self._processMap["onCallDataChanged"] = Processor.process_onCallDataChanged
        self._processMap["onCallDataChangedEx"] = Processor.process_onCallDataChangedEx
        self._processMap["onLoginStateChanged"] = Processor.process_onLoginStateChanged
        self._processMap["onLoginResponse"] = Processor.process_onLoginResponse
        self._processMap["onTopOfCallQueueChanged"] = Processor.process_onTopOfCallQueueChanged
        self._processMap["onRingTransferStateChanged"] = Processor.process_onRingTransferStateChanged
        self._processMap["onRingTransferStateChangeError"] = Processor.process_onRingTransferStateChangeError
        self._processMap["onRingTransferSequenceStateChanged"] = Processor.process_onRingTransferSequenceStateChanged
        self._processMap["onRingTransferSequenceStateChangeError"] = Processor.process_onRingTransferSequenceStateChangeError
        self._processMap["onInterfaceActionStateChanged"] = Processor.process_onInterfaceActionStateChanged
        self._processMap["onInterfaceActionKeyChanged"] = Processor.process_onInterfaceActionKeyChanged
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_onLineStatesChanged(self, seqid, iprot, oprot):
        args = onLineStatesChanged_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.onLineStatesChanged(args.turretName, args.states)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_onCallDataChanged(self, seqid, iprot, oprot):
        args = onCallDataChanged_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.onCallDataChanged(args.turretName, args.lineName, args.partyNumber, args.partyName, args.contactName)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_onCallDataChangedEx(self, seqid, iprot, oprot):
        args = onCallDataChangedEx_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.onCallDataChangedEx(args.turretName, args.callData)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_onLoginStateChanged(self, seqid, iprot, oprot):
        args = onLoginStateChanged_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.onLoginStateChanged(args.turretName, args.state)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_onLoginResponse(self, seqid, iprot, oprot):
        args = onLoginResponse_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.onLoginResponse(args.turretName, args.errorCode, args.errorDescription)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_onTopOfCallQueueChanged(self, seqid, iprot, oprot):
        args = onTopOfCallQueueChanged_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.onTopOfCallQueueChanged(args.turretName, args.lineName)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_onRingTransferStateChanged(self, seqid, iprot, oprot):
        args = onRingTransferStateChanged_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.onRingTransferStateChanged(args.turretName, args.id, args.state)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_onRingTransferStateChangeError(self, seqid, iprot, oprot):
        args = onRingTransferStateChangeError_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.onRingTransferStateChangeError(args.turretName, args.id, args.errorCode, args.errorDescription)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_onRingTransferSequenceStateChanged(self, seqid, iprot, oprot):
        args = onRingTransferSequenceStateChanged_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.onRingTransferSequenceStateChanged(args.turretName, args.id, args.state)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_onRingTransferSequenceStateChangeError(self, seqid, iprot, oprot):
        args = onRingTransferSequenceStateChangeError_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.onRingTransferSequenceStateChangeError(args.turretName, args.id, args.errorCode, args.errorDescription)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_onInterfaceActionStateChanged(self, seqid, iprot, oprot):
        args = onInterfaceActionStateChanged_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.onInterfaceActionStateChanged(args.turretName, args.apiName, args.state)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_onInterfaceActionKeyChanged(self, seqid, iprot, oprot):
        args = onInterfaceActionKeyChanged_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.onInterfaceActionKeyChanged(args.turretName, args.apiName, args.keyState)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

# HELPER FUNCTIONS AND STRUCTURES


class onLineStatesChanged_args(object):
    """
    Attributes:
     - turretName: Identifier of the turret specified at notification subscription.
    It's an empty string if no name was specified at subscription.
     - states: Contains the name and the new state of the line.

    """


    def __init__(self, turretName=None, states=None,):
        self.turretName = turretName
        self.states = states

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.turretName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.states = LineStatesData()
                    self.states.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('onLineStatesChanged_args')
        if self.turretName is not None:
            oprot.writeFieldBegin('turretName', TType.STRING, 1)
            oprot.writeString(self.turretName.encode('utf-8') if sys.version_info[0] == 2 else self.turretName)
            oprot.writeFieldEnd()
        if self.states is not None:
            oprot.writeFieldBegin('states', TType.STRUCT, 2)
            self.states.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(onLineStatesChanged_args)
onLineStatesChanged_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'turretName', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'states', [LineStatesData, None], None, ),  # 2
)


class onCallDataChanged_args(object):
    """
    Attributes:
     - turretName: Identifier of the turret specified at notification subscription.
    It's an empty string if no name was specified at subscription.
     - lineName: Name of the line.
     - partyNumber: Line number of the other party.
     - partyName: Name of the line as provided by the PBX, encoded in UTF-8.
     - contactName: Name of the calling party resolved from the contact list, encoded in UTF-8.

    """


    def __init__(self, turretName=None, lineName=None, partyNumber=None, partyName=None, contactName=None,):
        self.turretName = turretName
        self.lineName = lineName
        self.partyNumber = partyNumber
        self.partyName = partyName
        self.contactName = contactName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.turretName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.lineName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.partyNumber = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.partyName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.contactName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('onCallDataChanged_args')
        if self.turretName is not None:
            oprot.writeFieldBegin('turretName', TType.STRING, 1)
            oprot.writeString(self.turretName.encode('utf-8') if sys.version_info[0] == 2 else self.turretName)
            oprot.writeFieldEnd()
        if self.lineName is not None:
            oprot.writeFieldBegin('lineName', TType.STRING, 2)
            oprot.writeString(self.lineName.encode('utf-8') if sys.version_info[0] == 2 else self.lineName)
            oprot.writeFieldEnd()
        if self.partyNumber is not None:
            oprot.writeFieldBegin('partyNumber', TType.STRING, 3)
            oprot.writeString(self.partyNumber.encode('utf-8') if sys.version_info[0] == 2 else self.partyNumber)
            oprot.writeFieldEnd()
        if self.partyName is not None:
            oprot.writeFieldBegin('partyName', TType.STRING, 4)
            oprot.writeString(self.partyName.encode('utf-8') if sys.version_info[0] == 2 else self.partyName)
            oprot.writeFieldEnd()
        if self.contactName is not None:
            oprot.writeFieldBegin('contactName', TType.STRING, 5)
            oprot.writeString(self.contactName.encode('utf-8') if sys.version_info[0] == 2 else self.contactName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(onCallDataChanged_args)
onCallDataChanged_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'turretName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'lineName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'partyNumber', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'partyName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'contactName', 'UTF8', None, ),  # 5
)


class onCallDataChangedEx_args(object):
    """
    Attributes:
     - turretName: Identifier of the turret specified at notification subscription.
    It's an empty string if no name was specified at subscription.
     - callData

    """


    def __init__(self, turretName=None, callData=None,):
        self.turretName = turretName
        self.callData = callData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.turretName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.callData = CallData()
                    self.callData.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('onCallDataChangedEx_args')
        if self.turretName is not None:
            oprot.writeFieldBegin('turretName', TType.STRING, 1)
            oprot.writeString(self.turretName.encode('utf-8') if sys.version_info[0] == 2 else self.turretName)
            oprot.writeFieldEnd()
        if self.callData is not None:
            oprot.writeFieldBegin('callData', TType.STRUCT, 2)
            self.callData.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(onCallDataChangedEx_args)
onCallDataChangedEx_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'turretName', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'callData', [CallData, None], None, ),  # 2
)


class onLoginStateChanged_args(object):
    """
    Attributes:
     - turretName: Identifier of the turret specified at notification subscription.
    It's an empty string if no name was specified at subscription.
     - state: New login state of the turret.

    """


    def __init__(self, turretName=None, state=None,):
        self.turretName = turretName
        self.state = state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.turretName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('onLoginStateChanged_args')
        if self.turretName is not None:
            oprot.writeFieldBegin('turretName', TType.STRING, 1)
            oprot.writeString(self.turretName.encode('utf-8') if sys.version_info[0] == 2 else self.turretName)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 2)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(onLoginStateChanged_args)
onLoginStateChanged_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'turretName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'state', None, None, ),  # 2
)


class onLoginResponse_args(object):
    """
    Attributes:
     - turretName: Identifier of the turret specified at notification subscription.
    It's an empty string if no name was specified at subscription.
     - errorCode: Error code (see :ref:`Constants`)
     - errorDescription: Short text description of the error

    """


    def __init__(self, turretName=None, errorCode=None, errorDescription=None,):
        self.turretName = turretName
        self.errorCode = errorCode
        self.errorDescription = errorDescription

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.turretName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorDescription = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('onLoginResponse_args')
        if self.turretName is not None:
            oprot.writeFieldBegin('turretName', TType.STRING, 1)
            oprot.writeString(self.turretName.encode('utf-8') if sys.version_info[0] == 2 else self.turretName)
            oprot.writeFieldEnd()
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 2)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorDescription is not None:
            oprot.writeFieldBegin('errorDescription', TType.STRING, 3)
            oprot.writeString(self.errorDescription.encode('utf-8') if sys.version_info[0] == 2 else self.errorDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(onLoginResponse_args)
onLoginResponse_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'turretName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'errorCode', None, None, ),  # 2
    (3, TType.STRING, 'errorDescription', 'UTF8', None, ),  # 3
)


class onTopOfCallQueueChanged_args(object):
    """
    Attributes:
     - turretName: Identifier of the turret specified at notification subscription.
    It's an empty string if no name was specified at subscription.
     - lineName: Name of the line at the top of the call queue or an empty string if there is none.

    """


    def __init__(self, turretName=None, lineName=None,):
        self.turretName = turretName
        self.lineName = lineName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.turretName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.lineName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('onTopOfCallQueueChanged_args')
        if self.turretName is not None:
            oprot.writeFieldBegin('turretName', TType.STRING, 1)
            oprot.writeString(self.turretName.encode('utf-8') if sys.version_info[0] == 2 else self.turretName)
            oprot.writeFieldEnd()
        if self.lineName is not None:
            oprot.writeFieldBegin('lineName', TType.STRING, 2)
            oprot.writeString(self.lineName.encode('utf-8') if sys.version_info[0] == 2 else self.lineName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(onTopOfCallQueueChanged_args)
onTopOfCallQueueChanged_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'turretName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'lineName', 'UTF8', None, ),  # 2
)


class onRingTransferStateChanged_args(object):
    """
    Attributes:
     - turretName: Identifier of the turret specified at notification subscription.
    It's an empty string if no name was specified at subscription.
     - id: Identifier of the ring transfer
     - state: The new state of the ring transfer

    """


    def __init__(self, turretName=None, id=None, state=None,):
        self.turretName = turretName
        self.id = id
        self.state = state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.turretName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.id = RingTransferId()
                    self.id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('onRingTransferStateChanged_args')
        if self.turretName is not None:
            oprot.writeFieldBegin('turretName', TType.STRING, 1)
            oprot.writeString(self.turretName.encode('utf-8') if sys.version_info[0] == 2 else self.turretName)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRUCT, 2)
            self.id.write(oprot)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 3)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(onRingTransferStateChanged_args)
onRingTransferStateChanged_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'turretName', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'id', [RingTransferId, None], None, ),  # 2
    (3, TType.I32, 'state', None, None, ),  # 3
)


class onRingTransferStateChangeError_args(object):
    """
    Attributes:
     - turretName: Identifier of the turret specified at notification subscription.
    It's an empty string if no name was specified at subscription.
     - id: Identifier of the ring transfer
     - errorCode: Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
     - errorDescription: Short text description of the error

    """


    def __init__(self, turretName=None, id=None, errorCode=None, errorDescription=None,):
        self.turretName = turretName
        self.id = id
        self.errorCode = errorCode
        self.errorDescription = errorDescription

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.turretName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.id = RingTransferId()
                    self.id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.errorDescription = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('onRingTransferStateChangeError_args')
        if self.turretName is not None:
            oprot.writeFieldBegin('turretName', TType.STRING, 1)
            oprot.writeString(self.turretName.encode('utf-8') if sys.version_info[0] == 2 else self.turretName)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRUCT, 2)
            self.id.write(oprot)
            oprot.writeFieldEnd()
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 3)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorDescription is not None:
            oprot.writeFieldBegin('errorDescription', TType.STRING, 4)
            oprot.writeString(self.errorDescription.encode('utf-8') if sys.version_info[0] == 2 else self.errorDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(onRingTransferStateChangeError_args)
onRingTransferStateChangeError_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'turretName', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'id', [RingTransferId, None], None, ),  # 2
    (3, TType.I32, 'errorCode', None, None, ),  # 3
    (4, TType.STRING, 'errorDescription', 'UTF8', None, ),  # 4
)


class onRingTransferSequenceStateChanged_args(object):
    """
    Attributes:
     - turretName: Identifier of the turret specified at notification subscription.
    It's an empty string if no name was specified at subscription.
     - id: Identifier of the ring transfer sequence
     - state: The new state of the ring transfer sequence

    """


    def __init__(self, turretName=None, id=None, state=None,):
        self.turretName = turretName
        self.id = id
        self.state = state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.turretName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.id = RingTransferId()
                    self.id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('onRingTransferSequenceStateChanged_args')
        if self.turretName is not None:
            oprot.writeFieldBegin('turretName', TType.STRING, 1)
            oprot.writeString(self.turretName.encode('utf-8') if sys.version_info[0] == 2 else self.turretName)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRUCT, 2)
            self.id.write(oprot)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 3)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(onRingTransferSequenceStateChanged_args)
onRingTransferSequenceStateChanged_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'turretName', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'id', [RingTransferId, None], None, ),  # 2
    (3, TType.I32, 'state', None, None, ),  # 3
)


class onRingTransferSequenceStateChangeError_args(object):
    """
    Attributes:
     - turretName: Identifier of the turret specified at notification subscription.
    It's an empty string if no name was specified at subscription.
     - id: Identifier of the ring transfer sequence
     - errorCode: Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
     - errorDescription: Short text description of the error

    """


    def __init__(self, turretName=None, id=None, errorCode=None, errorDescription=None,):
        self.turretName = turretName
        self.id = id
        self.errorCode = errorCode
        self.errorDescription = errorDescription

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.turretName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.id = RingTransferId()
                    self.id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.errorDescription = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('onRingTransferSequenceStateChangeError_args')
        if self.turretName is not None:
            oprot.writeFieldBegin('turretName', TType.STRING, 1)
            oprot.writeString(self.turretName.encode('utf-8') if sys.version_info[0] == 2 else self.turretName)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRUCT, 2)
            self.id.write(oprot)
            oprot.writeFieldEnd()
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 3)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorDescription is not None:
            oprot.writeFieldBegin('errorDescription', TType.STRING, 4)
            oprot.writeString(self.errorDescription.encode('utf-8') if sys.version_info[0] == 2 else self.errorDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(onRingTransferSequenceStateChangeError_args)
onRingTransferSequenceStateChangeError_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'turretName', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'id', [RingTransferId, None], None, ),  # 2
    (3, TType.I32, 'errorCode', None, None, ),  # 3
    (4, TType.STRING, 'errorDescription', 'UTF8', None, ),  # 4
)


class onInterfaceActionStateChanged_args(object):
    """
    Attributes:
     - turretName: Identifier of the turret specified at notification subscription.
    It's an empty string if no name was specified at subscription.
     - apiName: Identifier of the interface action
     - state: The new state of the interface action

    """


    def __init__(self, turretName=None, apiName=None, state=None,):
        self.turretName = turretName
        self.apiName = apiName
        self.state = state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.turretName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.apiName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.state = InterfaceActionState()
                    self.state.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('onInterfaceActionStateChanged_args')
        if self.turretName is not None:
            oprot.writeFieldBegin('turretName', TType.STRING, 1)
            oprot.writeString(self.turretName.encode('utf-8') if sys.version_info[0] == 2 else self.turretName)
            oprot.writeFieldEnd()
        if self.apiName is not None:
            oprot.writeFieldBegin('apiName', TType.STRING, 2)
            oprot.writeString(self.apiName.encode('utf-8') if sys.version_info[0] == 2 else self.apiName)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRUCT, 3)
            self.state.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(onInterfaceActionStateChanged_args)
onInterfaceActionStateChanged_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'turretName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'apiName', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'state', [InterfaceActionState, None], None, ),  # 3
)


class onInterfaceActionKeyChanged_args(object):
    """
    Attributes:
     - turretName: Identifier of the turret specified at notification subscription.
    It's an empty string if no name was specified at subscription.
     - apiName: Identifier of the interface action
     - keyState: The key event

    """


    def __init__(self, turretName=None, apiName=None, keyState=None,):
        self.turretName = turretName
        self.apiName = apiName
        self.keyState = keyState

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.turretName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.apiName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.keyState = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('onInterfaceActionKeyChanged_args')
        if self.turretName is not None:
            oprot.writeFieldBegin('turretName', TType.STRING, 1)
            oprot.writeString(self.turretName.encode('utf-8') if sys.version_info[0] == 2 else self.turretName)
            oprot.writeFieldEnd()
        if self.apiName is not None:
            oprot.writeFieldBegin('apiName', TType.STRING, 2)
            oprot.writeString(self.apiName.encode('utf-8') if sys.version_info[0] == 2 else self.apiName)
            oprot.writeFieldEnd()
        if self.keyState is not None:
            oprot.writeFieldBegin('keyState', TType.I32, 3)
            oprot.writeI32(self.keyState)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(onInterfaceActionKeyChanged_args)
onInterfaceActionKeyChanged_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'turretName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'apiName', 'UTF8', None, ),  # 2
    (3, TType.I32, 'keyState', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
