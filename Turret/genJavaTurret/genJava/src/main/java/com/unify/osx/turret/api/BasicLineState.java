/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.unify.osx.turret.api;


@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2023-09-29")
public enum BasicLineState implements org.apache.thrift.TEnum {
  /**
   * No activity on the line
   */
  Idle(0),
  /**
   * There is an incoming call on the line
   */
  Ringing(1),
  /**
   * The line is considered as connected
   */
  Connected(2),
  /**
   * There is an ongoing call on the line on this device
   */
  Conversation(3),
  /**
   * There is an ongoing call on the line on another device
   */
  ConversationByAnother(4),
  /**
   * The call on this line is put on hold by this device, and the conversation partner isn't notified about this
   */
  PrivateHold(5),
  /**
   * The call on this line is put on hold by another device, and the conversation partner isn't notified about this
   */
  PrivateHoldByAnother(6),
  /**
   * The call on this line is put on hold by this device
   */
  CommonHold(7),
  /**
   * The call on this line is put on hold by another device
   */
  CommonHoldByAnother(8),
  /**
   * The call is private for this device, and cannot be accessed by other devices
   */
  Privacy(9),
  /**
   * The call is private for another device, and cannot be accessed by this device
   */
  PrivacyByAnother(10),
  /**
   * The line is assigned to a speech monitoring channel by this device, and is not present on any speech unit
   */
  SpeechMonitoring(11),
  /**
   * This line is hosting a conference that is put on hold
   */
  ConferenceHold(12),
  /**
   * The line is unavailable due to connection error
   */
  Inactive(13),
  /**
   * The line is assigned to a speech monitoring channel by another device
   */
  SpeechMonitoringByAnother(14),
  /**
   * There is an active announcement on the line
   */
  Announcement(15),
  /**
   * The line is reserved to be used by this device, and cannot be accessed by other devices
   */
  Preseized(16),
  /**
   * The line is reserved to be used by another device, and cannot be accessed by this device
   */
  PreseizedByAnother(17),
  /**
   * The line is the host of a quick conference
   */
  HostingQuickConference(18),
  /**
   * The line is the host of a consultation
   */
  HostingConsultation(19),
  /**
   * The line is the host of a PBX conference
   */
  HostingPbxConference(20),
  /**
   * The line has a consultation call that was answered by the called party
   */
  ConsultationConnected(21),
  Unknown(255);

  private final int value;

  private BasicLineState(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  @Override
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  @org.apache.thrift.annotation.Nullable
  public static BasicLineState findByValue(int value) { 
    switch (value) {
      case 0:
        return Idle;
      case 1:
        return Ringing;
      case 2:
        return Connected;
      case 3:
        return Conversation;
      case 4:
        return ConversationByAnother;
      case 5:
        return PrivateHold;
      case 6:
        return PrivateHoldByAnother;
      case 7:
        return CommonHold;
      case 8:
        return CommonHoldByAnother;
      case 9:
        return Privacy;
      case 10:
        return PrivacyByAnother;
      case 11:
        return SpeechMonitoring;
      case 12:
        return ConferenceHold;
      case 13:
        return Inactive;
      case 14:
        return SpeechMonitoringByAnother;
      case 15:
        return Announcement;
      case 16:
        return Preseized;
      case 17:
        return PreseizedByAnother;
      case 18:
        return HostingQuickConference;
      case 19:
        return HostingConsultation;
      case 20:
        return HostingPbxConference;
      case 21:
        return ConsultationConnected;
      case 255:
        return Unknown;
      default:
        return null;
    }
  }
}
