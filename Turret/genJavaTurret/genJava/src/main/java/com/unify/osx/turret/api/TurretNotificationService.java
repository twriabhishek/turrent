/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.unify.osx.turret.api;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2023-09-29")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TurretNotificationService {

  public interface Iface {

    /**
     * Notifies about the change of state of the specified line.
     * 
     * @param turretName Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     * 
     * @param states Contains the name and the new state of the line.
     */
    public void onLineStatesChanged(java.lang.String turretName, LineStatesData states) throws org.apache.thrift.TException;

    /**
     * .. deprecated:: V7.3.1
     *    Use :thrift:service_method:`TurretApi.TurretNotificationService.onCallDataChangedEx` instead.
     * 
     * Notifies about the change of the possibly displayed name(s) of the line.
     * Note: The turret's GUI shows this information in the following way:
     * 
     *     #. If ``contactName`` is not empty, then it is displayed.
     *     #. If ``partyName`` is not empty, then ``"{partyNumber} {partyName}"`` is displayed.
     *     #. In other cases, the ``partyNumber`` is diplayed.
     * 
     * 
     * @param turretName Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     * 
     * @param lineName Name of the line.
     * 
     * @param partyNumber Line number of the other party.
     * 
     * @param partyName Name of the line as provided by the PBX, encoded in UTF-8.
     * 
     * @param contactName Name of the calling party resolved from the contact list, encoded in UTF-8.
     */
    public void onCallDataChanged(java.lang.String turretName, java.lang.String lineName, java.lang.String partyNumber, java.lang.String partyName, java.lang.String contactName) throws org.apache.thrift.TException;

    /**
     * Notifies about the change in properties of a call.
     * See :thrift:struct:`TurretApi.CallData` for the included information.
     * 
     * @param turretName Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     * 
     * @param callData
     */
    public void onCallDataChangedEx(java.lang.String turretName, CallData callData) throws org.apache.thrift.TException;

    /**
     * Notifies about the login state change of the turret software.
     * 
     * @param turretName Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     * 
     * @param state New login state of the turret.
     */
    public void onLoginStateChanged(java.lang.String turretName, TurretState state) throws org.apache.thrift.TException;

    /**
     * Notifies about an error during the login process
     * 
     * @param turretName Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     * 
     * @param errorCode Error code (see :ref:`Constants`)
     * 
     * @param errorDescription Short text description of the error
     */
    public void onLoginResponse(java.lang.String turretName, int errorCode, java.lang.String errorDescription) throws org.apache.thrift.TException;

    /**
     * Notifies a new incoming call having higher priority than the ones before, or
     * if all incoming calls have been removed from the call queue
     * 
     * @param turretName Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     * 
     * @param lineName Name of the line at the top of the call queue or an empty string if there is none.
     */
    public void onTopOfCallQueueChanged(java.lang.String turretName, java.lang.String lineName) throws org.apache.thrift.TException;

    /**
     * Notifies a ring transfer state change.
     * 
     * @param turretName Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     * 
     * @param id Identifier of the ring transfer
     * 
     * @param state The new state of the ring transfer
     */
    public void onRingTransferStateChanged(java.lang.String turretName, RingTransferId id, RingTransferState state) throws org.apache.thrift.TException;

    /**
     * Notifies that a previous request to change the activation of a ring transfer has failed.
     * (See :thrift:service_method:`TurretApi.TurretRequestService.setRingTransferActive`.)
     * 
     * @param turretName Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     * 
     * @param id Identifier of the ring transfer
     * 
     * @param errorCode Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
     * 
     * @param errorDescription Short text description of the error
     */
    public void onRingTransferStateChangeError(java.lang.String turretName, RingTransferId id, int errorCode, java.lang.String errorDescription) throws org.apache.thrift.TException;

    /**
     * Notifies a ring transfer sequence state change.
     * 
     * @param turretName Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     * 
     * @param id Identifier of the ring transfer sequence
     * 
     * @param state The new state of the ring transfer sequence
     */
    public void onRingTransferSequenceStateChanged(java.lang.String turretName, RingTransferId id, RingTransferSequenceState state) throws org.apache.thrift.TException;

    /**
     * Notifies that a previous request to change the activation of a ring transfer sequence has failed.
     * (See :thrift:service_method:`TurretApi.TurretRequestService.setRingTransferSequenceActive`.)
     * 
     * @param turretName Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     * 
     * @param id Identifier of the ring transfer sequence
     * 
     * @param errorCode Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
     * 
     * @param errorDescription Short text description of the error
     */
    public void onRingTransferSequenceStateChangeError(java.lang.String turretName, RingTransferId id, int errorCode, java.lang.String errorDescription) throws org.apache.thrift.TException;

    /**
     * Notifies a interface action state change (including changes in the overriding texts).
     * 
     * @param turretName Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     * 
     * @param apiName Identifier of the interface action
     * 
     * @param state The new state of the interface action
     */
    public void onInterfaceActionStateChanged(java.lang.String turretName, java.lang.String apiName, InterfaceActionState state) throws org.apache.thrift.TException;

    /**
     * Notifies an interface action key event (press/release).
     * 
     * @param turretName Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     * 
     * @param apiName Identifier of the interface action
     * 
     * @param keyState The key event
     */
    public void onInterfaceActionKeyChanged(java.lang.String turretName, java.lang.String apiName, InterfaceActionKeyState keyState) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void onLineStatesChanged(java.lang.String turretName, LineStatesData states, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void onCallDataChanged(java.lang.String turretName, java.lang.String lineName, java.lang.String partyNumber, java.lang.String partyName, java.lang.String contactName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void onCallDataChangedEx(java.lang.String turretName, CallData callData, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void onLoginStateChanged(java.lang.String turretName, TurretState state, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void onLoginResponse(java.lang.String turretName, int errorCode, java.lang.String errorDescription, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void onTopOfCallQueueChanged(java.lang.String turretName, java.lang.String lineName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void onRingTransferStateChanged(java.lang.String turretName, RingTransferId id, RingTransferState state, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void onRingTransferStateChangeError(java.lang.String turretName, RingTransferId id, int errorCode, java.lang.String errorDescription, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void onRingTransferSequenceStateChanged(java.lang.String turretName, RingTransferId id, RingTransferSequenceState state, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void onRingTransferSequenceStateChangeError(java.lang.String turretName, RingTransferId id, int errorCode, java.lang.String errorDescription, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void onInterfaceActionStateChanged(java.lang.String turretName, java.lang.String apiName, InterfaceActionState state, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void onInterfaceActionKeyChanged(java.lang.String turretName, java.lang.String apiName, InterfaceActionKeyState keyState, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public void onLineStatesChanged(java.lang.String turretName, LineStatesData states) throws org.apache.thrift.TException
    {
      send_onLineStatesChanged(turretName, states);
    }

    public void send_onLineStatesChanged(java.lang.String turretName, LineStatesData states) throws org.apache.thrift.TException
    {
      onLineStatesChanged_args args = new onLineStatesChanged_args();
      args.setTurretName(turretName);
      args.setStates(states);
      sendBaseOneway("onLineStatesChanged", args);
    }

    @Override
    public void onCallDataChanged(java.lang.String turretName, java.lang.String lineName, java.lang.String partyNumber, java.lang.String partyName, java.lang.String contactName) throws org.apache.thrift.TException
    {
      send_onCallDataChanged(turretName, lineName, partyNumber, partyName, contactName);
    }

    public void send_onCallDataChanged(java.lang.String turretName, java.lang.String lineName, java.lang.String partyNumber, java.lang.String partyName, java.lang.String contactName) throws org.apache.thrift.TException
    {
      onCallDataChanged_args args = new onCallDataChanged_args();
      args.setTurretName(turretName);
      args.setLineName(lineName);
      args.setPartyNumber(partyNumber);
      args.setPartyName(partyName);
      args.setContactName(contactName);
      sendBaseOneway("onCallDataChanged", args);
    }

    @Override
    public void onCallDataChangedEx(java.lang.String turretName, CallData callData) throws org.apache.thrift.TException
    {
      send_onCallDataChangedEx(turretName, callData);
    }

    public void send_onCallDataChangedEx(java.lang.String turretName, CallData callData) throws org.apache.thrift.TException
    {
      onCallDataChangedEx_args args = new onCallDataChangedEx_args();
      args.setTurretName(turretName);
      args.setCallData(callData);
      sendBaseOneway("onCallDataChangedEx", args);
    }

    @Override
    public void onLoginStateChanged(java.lang.String turretName, TurretState state) throws org.apache.thrift.TException
    {
      send_onLoginStateChanged(turretName, state);
    }

    public void send_onLoginStateChanged(java.lang.String turretName, TurretState state) throws org.apache.thrift.TException
    {
      onLoginStateChanged_args args = new onLoginStateChanged_args();
      args.setTurretName(turretName);
      args.setState(state);
      sendBaseOneway("onLoginStateChanged", args);
    }

    @Override
    public void onLoginResponse(java.lang.String turretName, int errorCode, java.lang.String errorDescription) throws org.apache.thrift.TException
    {
      send_onLoginResponse(turretName, errorCode, errorDescription);
    }

    public void send_onLoginResponse(java.lang.String turretName, int errorCode, java.lang.String errorDescription) throws org.apache.thrift.TException
    {
      onLoginResponse_args args = new onLoginResponse_args();
      args.setTurretName(turretName);
      args.setErrorCode(errorCode);
      args.setErrorDescription(errorDescription);
      sendBaseOneway("onLoginResponse", args);
    }

    @Override
    public void onTopOfCallQueueChanged(java.lang.String turretName, java.lang.String lineName) throws org.apache.thrift.TException
    {
      send_onTopOfCallQueueChanged(turretName, lineName);
    }

    public void send_onTopOfCallQueueChanged(java.lang.String turretName, java.lang.String lineName) throws org.apache.thrift.TException
    {
      onTopOfCallQueueChanged_args args = new onTopOfCallQueueChanged_args();
      args.setTurretName(turretName);
      args.setLineName(lineName);
      sendBaseOneway("onTopOfCallQueueChanged", args);
    }

    @Override
    public void onRingTransferStateChanged(java.lang.String turretName, RingTransferId id, RingTransferState state) throws org.apache.thrift.TException
    {
      send_onRingTransferStateChanged(turretName, id, state);
    }

    public void send_onRingTransferStateChanged(java.lang.String turretName, RingTransferId id, RingTransferState state) throws org.apache.thrift.TException
    {
      onRingTransferStateChanged_args args = new onRingTransferStateChanged_args();
      args.setTurretName(turretName);
      args.setId(id);
      args.setState(state);
      sendBaseOneway("onRingTransferStateChanged", args);
    }

    @Override
    public void onRingTransferStateChangeError(java.lang.String turretName, RingTransferId id, int errorCode, java.lang.String errorDescription) throws org.apache.thrift.TException
    {
      send_onRingTransferStateChangeError(turretName, id, errorCode, errorDescription);
    }

    public void send_onRingTransferStateChangeError(java.lang.String turretName, RingTransferId id, int errorCode, java.lang.String errorDescription) throws org.apache.thrift.TException
    {
      onRingTransferStateChangeError_args args = new onRingTransferStateChangeError_args();
      args.setTurretName(turretName);
      args.setId(id);
      args.setErrorCode(errorCode);
      args.setErrorDescription(errorDescription);
      sendBaseOneway("onRingTransferStateChangeError", args);
    }

    @Override
    public void onRingTransferSequenceStateChanged(java.lang.String turretName, RingTransferId id, RingTransferSequenceState state) throws org.apache.thrift.TException
    {
      send_onRingTransferSequenceStateChanged(turretName, id, state);
    }

    public void send_onRingTransferSequenceStateChanged(java.lang.String turretName, RingTransferId id, RingTransferSequenceState state) throws org.apache.thrift.TException
    {
      onRingTransferSequenceStateChanged_args args = new onRingTransferSequenceStateChanged_args();
      args.setTurretName(turretName);
      args.setId(id);
      args.setState(state);
      sendBaseOneway("onRingTransferSequenceStateChanged", args);
    }

    @Override
    public void onRingTransferSequenceStateChangeError(java.lang.String turretName, RingTransferId id, int errorCode, java.lang.String errorDescription) throws org.apache.thrift.TException
    {
      send_onRingTransferSequenceStateChangeError(turretName, id, errorCode, errorDescription);
    }

    public void send_onRingTransferSequenceStateChangeError(java.lang.String turretName, RingTransferId id, int errorCode, java.lang.String errorDescription) throws org.apache.thrift.TException
    {
      onRingTransferSequenceStateChangeError_args args = new onRingTransferSequenceStateChangeError_args();
      args.setTurretName(turretName);
      args.setId(id);
      args.setErrorCode(errorCode);
      args.setErrorDescription(errorDescription);
      sendBaseOneway("onRingTransferSequenceStateChangeError", args);
    }

    @Override
    public void onInterfaceActionStateChanged(java.lang.String turretName, java.lang.String apiName, InterfaceActionState state) throws org.apache.thrift.TException
    {
      send_onInterfaceActionStateChanged(turretName, apiName, state);
    }

    public void send_onInterfaceActionStateChanged(java.lang.String turretName, java.lang.String apiName, InterfaceActionState state) throws org.apache.thrift.TException
    {
      onInterfaceActionStateChanged_args args = new onInterfaceActionStateChanged_args();
      args.setTurretName(turretName);
      args.setApiName(apiName);
      args.setState(state);
      sendBaseOneway("onInterfaceActionStateChanged", args);
    }

    @Override
    public void onInterfaceActionKeyChanged(java.lang.String turretName, java.lang.String apiName, InterfaceActionKeyState keyState) throws org.apache.thrift.TException
    {
      send_onInterfaceActionKeyChanged(turretName, apiName, keyState);
    }

    public void send_onInterfaceActionKeyChanged(java.lang.String turretName, java.lang.String apiName, InterfaceActionKeyState keyState) throws org.apache.thrift.TException
    {
      onInterfaceActionKeyChanged_args args = new onInterfaceActionKeyChanged_args();
      args.setTurretName(turretName);
      args.setApiName(apiName);
      args.setKeyState(keyState);
      sendBaseOneway("onInterfaceActionKeyChanged", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void onLineStatesChanged(java.lang.String turretName, LineStatesData states, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onLineStatesChanged_call method_call = new onLineStatesChanged_call(turretName, states, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onLineStatesChanged_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String turretName;
      private LineStatesData states;
      public onLineStatesChanged_call(java.lang.String turretName, LineStatesData states, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.turretName = turretName;
        this.states = states;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onLineStatesChanged", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        onLineStatesChanged_args args = new onLineStatesChanged_args();
        args.setTurretName(turretName);
        args.setStates(states);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void onCallDataChanged(java.lang.String turretName, java.lang.String lineName, java.lang.String partyNumber, java.lang.String partyName, java.lang.String contactName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onCallDataChanged_call method_call = new onCallDataChanged_call(turretName, lineName, partyNumber, partyName, contactName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onCallDataChanged_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String turretName;
      private java.lang.String lineName;
      private java.lang.String partyNumber;
      private java.lang.String partyName;
      private java.lang.String contactName;
      public onCallDataChanged_call(java.lang.String turretName, java.lang.String lineName, java.lang.String partyNumber, java.lang.String partyName, java.lang.String contactName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.turretName = turretName;
        this.lineName = lineName;
        this.partyNumber = partyNumber;
        this.partyName = partyName;
        this.contactName = contactName;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onCallDataChanged", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        onCallDataChanged_args args = new onCallDataChanged_args();
        args.setTurretName(turretName);
        args.setLineName(lineName);
        args.setPartyNumber(partyNumber);
        args.setPartyName(partyName);
        args.setContactName(contactName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void onCallDataChangedEx(java.lang.String turretName, CallData callData, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onCallDataChangedEx_call method_call = new onCallDataChangedEx_call(turretName, callData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onCallDataChangedEx_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String turretName;
      private CallData callData;
      public onCallDataChangedEx_call(java.lang.String turretName, CallData callData, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.turretName = turretName;
        this.callData = callData;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onCallDataChangedEx", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        onCallDataChangedEx_args args = new onCallDataChangedEx_args();
        args.setTurretName(turretName);
        args.setCallData(callData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void onLoginStateChanged(java.lang.String turretName, TurretState state, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onLoginStateChanged_call method_call = new onLoginStateChanged_call(turretName, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onLoginStateChanged_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String turretName;
      private TurretState state;
      public onLoginStateChanged_call(java.lang.String turretName, TurretState state, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.turretName = turretName;
        this.state = state;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onLoginStateChanged", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        onLoginStateChanged_args args = new onLoginStateChanged_args();
        args.setTurretName(turretName);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void onLoginResponse(java.lang.String turretName, int errorCode, java.lang.String errorDescription, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onLoginResponse_call method_call = new onLoginResponse_call(turretName, errorCode, errorDescription, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onLoginResponse_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String turretName;
      private int errorCode;
      private java.lang.String errorDescription;
      public onLoginResponse_call(java.lang.String turretName, int errorCode, java.lang.String errorDescription, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.turretName = turretName;
        this.errorCode = errorCode;
        this.errorDescription = errorDescription;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onLoginResponse", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        onLoginResponse_args args = new onLoginResponse_args();
        args.setTurretName(turretName);
        args.setErrorCode(errorCode);
        args.setErrorDescription(errorDescription);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void onTopOfCallQueueChanged(java.lang.String turretName, java.lang.String lineName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onTopOfCallQueueChanged_call method_call = new onTopOfCallQueueChanged_call(turretName, lineName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onTopOfCallQueueChanged_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String turretName;
      private java.lang.String lineName;
      public onTopOfCallQueueChanged_call(java.lang.String turretName, java.lang.String lineName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.turretName = turretName;
        this.lineName = lineName;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onTopOfCallQueueChanged", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        onTopOfCallQueueChanged_args args = new onTopOfCallQueueChanged_args();
        args.setTurretName(turretName);
        args.setLineName(lineName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void onRingTransferStateChanged(java.lang.String turretName, RingTransferId id, RingTransferState state, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onRingTransferStateChanged_call method_call = new onRingTransferStateChanged_call(turretName, id, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onRingTransferStateChanged_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String turretName;
      private RingTransferId id;
      private RingTransferState state;
      public onRingTransferStateChanged_call(java.lang.String turretName, RingTransferId id, RingTransferState state, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.turretName = turretName;
        this.id = id;
        this.state = state;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onRingTransferStateChanged", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        onRingTransferStateChanged_args args = new onRingTransferStateChanged_args();
        args.setTurretName(turretName);
        args.setId(id);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void onRingTransferStateChangeError(java.lang.String turretName, RingTransferId id, int errorCode, java.lang.String errorDescription, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onRingTransferStateChangeError_call method_call = new onRingTransferStateChangeError_call(turretName, id, errorCode, errorDescription, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onRingTransferStateChangeError_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String turretName;
      private RingTransferId id;
      private int errorCode;
      private java.lang.String errorDescription;
      public onRingTransferStateChangeError_call(java.lang.String turretName, RingTransferId id, int errorCode, java.lang.String errorDescription, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.turretName = turretName;
        this.id = id;
        this.errorCode = errorCode;
        this.errorDescription = errorDescription;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onRingTransferStateChangeError", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        onRingTransferStateChangeError_args args = new onRingTransferStateChangeError_args();
        args.setTurretName(turretName);
        args.setId(id);
        args.setErrorCode(errorCode);
        args.setErrorDescription(errorDescription);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void onRingTransferSequenceStateChanged(java.lang.String turretName, RingTransferId id, RingTransferSequenceState state, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onRingTransferSequenceStateChanged_call method_call = new onRingTransferSequenceStateChanged_call(turretName, id, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onRingTransferSequenceStateChanged_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String turretName;
      private RingTransferId id;
      private RingTransferSequenceState state;
      public onRingTransferSequenceStateChanged_call(java.lang.String turretName, RingTransferId id, RingTransferSequenceState state, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.turretName = turretName;
        this.id = id;
        this.state = state;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onRingTransferSequenceStateChanged", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        onRingTransferSequenceStateChanged_args args = new onRingTransferSequenceStateChanged_args();
        args.setTurretName(turretName);
        args.setId(id);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void onRingTransferSequenceStateChangeError(java.lang.String turretName, RingTransferId id, int errorCode, java.lang.String errorDescription, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onRingTransferSequenceStateChangeError_call method_call = new onRingTransferSequenceStateChangeError_call(turretName, id, errorCode, errorDescription, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onRingTransferSequenceStateChangeError_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String turretName;
      private RingTransferId id;
      private int errorCode;
      private java.lang.String errorDescription;
      public onRingTransferSequenceStateChangeError_call(java.lang.String turretName, RingTransferId id, int errorCode, java.lang.String errorDescription, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.turretName = turretName;
        this.id = id;
        this.errorCode = errorCode;
        this.errorDescription = errorDescription;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onRingTransferSequenceStateChangeError", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        onRingTransferSequenceStateChangeError_args args = new onRingTransferSequenceStateChangeError_args();
        args.setTurretName(turretName);
        args.setId(id);
        args.setErrorCode(errorCode);
        args.setErrorDescription(errorDescription);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void onInterfaceActionStateChanged(java.lang.String turretName, java.lang.String apiName, InterfaceActionState state, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onInterfaceActionStateChanged_call method_call = new onInterfaceActionStateChanged_call(turretName, apiName, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onInterfaceActionStateChanged_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String turretName;
      private java.lang.String apiName;
      private InterfaceActionState state;
      public onInterfaceActionStateChanged_call(java.lang.String turretName, java.lang.String apiName, InterfaceActionState state, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.turretName = turretName;
        this.apiName = apiName;
        this.state = state;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onInterfaceActionStateChanged", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        onInterfaceActionStateChanged_args args = new onInterfaceActionStateChanged_args();
        args.setTurretName(turretName);
        args.setApiName(apiName);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void onInterfaceActionKeyChanged(java.lang.String turretName, java.lang.String apiName, InterfaceActionKeyState keyState, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onInterfaceActionKeyChanged_call method_call = new onInterfaceActionKeyChanged_call(turretName, apiName, keyState, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onInterfaceActionKeyChanged_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String turretName;
      private java.lang.String apiName;
      private InterfaceActionKeyState keyState;
      public onInterfaceActionKeyChanged_call(java.lang.String turretName, java.lang.String apiName, InterfaceActionKeyState keyState, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.turretName = turretName;
        this.apiName = apiName;
        this.keyState = keyState;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onInterfaceActionKeyChanged", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        onInterfaceActionKeyChanged_args args = new onInterfaceActionKeyChanged_args();
        args.setTurretName(turretName);
        args.setApiName(apiName);
        args.setKeyState(keyState);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("onLineStatesChanged", new onLineStatesChanged());
      processMap.put("onCallDataChanged", new onCallDataChanged());
      processMap.put("onCallDataChangedEx", new onCallDataChangedEx());
      processMap.put("onLoginStateChanged", new onLoginStateChanged());
      processMap.put("onLoginResponse", new onLoginResponse());
      processMap.put("onTopOfCallQueueChanged", new onTopOfCallQueueChanged());
      processMap.put("onRingTransferStateChanged", new onRingTransferStateChanged());
      processMap.put("onRingTransferStateChangeError", new onRingTransferStateChangeError());
      processMap.put("onRingTransferSequenceStateChanged", new onRingTransferSequenceStateChanged());
      processMap.put("onRingTransferSequenceStateChangeError", new onRingTransferSequenceStateChangeError());
      processMap.put("onInterfaceActionStateChanged", new onInterfaceActionStateChanged());
      processMap.put("onInterfaceActionKeyChanged", new onInterfaceActionKeyChanged());
      return processMap;
    }

    public static class onLineStatesChanged<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onLineStatesChanged_args> {
      public onLineStatesChanged() {
        super("onLineStatesChanged");
      }

      @Override
      public onLineStatesChanged_args getEmptyArgsInstance() {
        return new onLineStatesChanged_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, onLineStatesChanged_args args) throws org.apache.thrift.TException {
        iface.onLineStatesChanged(args.turretName, args.states);
        return null;
      }
    }

    public static class onCallDataChanged<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onCallDataChanged_args> {
      public onCallDataChanged() {
        super("onCallDataChanged");
      }

      @Override
      public onCallDataChanged_args getEmptyArgsInstance() {
        return new onCallDataChanged_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, onCallDataChanged_args args) throws org.apache.thrift.TException {
        iface.onCallDataChanged(args.turretName, args.lineName, args.partyNumber, args.partyName, args.contactName);
        return null;
      }
    }

    public static class onCallDataChangedEx<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onCallDataChangedEx_args> {
      public onCallDataChangedEx() {
        super("onCallDataChangedEx");
      }

      @Override
      public onCallDataChangedEx_args getEmptyArgsInstance() {
        return new onCallDataChangedEx_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, onCallDataChangedEx_args args) throws org.apache.thrift.TException {
        iface.onCallDataChangedEx(args.turretName, args.callData);
        return null;
      }
    }

    public static class onLoginStateChanged<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onLoginStateChanged_args> {
      public onLoginStateChanged() {
        super("onLoginStateChanged");
      }

      @Override
      public onLoginStateChanged_args getEmptyArgsInstance() {
        return new onLoginStateChanged_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, onLoginStateChanged_args args) throws org.apache.thrift.TException {
        iface.onLoginStateChanged(args.turretName, args.state);
        return null;
      }
    }

    public static class onLoginResponse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onLoginResponse_args> {
      public onLoginResponse() {
        super("onLoginResponse");
      }

      @Override
      public onLoginResponse_args getEmptyArgsInstance() {
        return new onLoginResponse_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, onLoginResponse_args args) throws org.apache.thrift.TException {
        iface.onLoginResponse(args.turretName, args.errorCode, args.errorDescription);
        return null;
      }
    }

    public static class onTopOfCallQueueChanged<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onTopOfCallQueueChanged_args> {
      public onTopOfCallQueueChanged() {
        super("onTopOfCallQueueChanged");
      }

      @Override
      public onTopOfCallQueueChanged_args getEmptyArgsInstance() {
        return new onTopOfCallQueueChanged_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, onTopOfCallQueueChanged_args args) throws org.apache.thrift.TException {
        iface.onTopOfCallQueueChanged(args.turretName, args.lineName);
        return null;
      }
    }

    public static class onRingTransferStateChanged<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onRingTransferStateChanged_args> {
      public onRingTransferStateChanged() {
        super("onRingTransferStateChanged");
      }

      @Override
      public onRingTransferStateChanged_args getEmptyArgsInstance() {
        return new onRingTransferStateChanged_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, onRingTransferStateChanged_args args) throws org.apache.thrift.TException {
        iface.onRingTransferStateChanged(args.turretName, args.id, args.state);
        return null;
      }
    }

    public static class onRingTransferStateChangeError<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onRingTransferStateChangeError_args> {
      public onRingTransferStateChangeError() {
        super("onRingTransferStateChangeError");
      }

      @Override
      public onRingTransferStateChangeError_args getEmptyArgsInstance() {
        return new onRingTransferStateChangeError_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, onRingTransferStateChangeError_args args) throws org.apache.thrift.TException {
        iface.onRingTransferStateChangeError(args.turretName, args.id, args.errorCode, args.errorDescription);
        return null;
      }
    }

    public static class onRingTransferSequenceStateChanged<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onRingTransferSequenceStateChanged_args> {
      public onRingTransferSequenceStateChanged() {
        super("onRingTransferSequenceStateChanged");
      }

      @Override
      public onRingTransferSequenceStateChanged_args getEmptyArgsInstance() {
        return new onRingTransferSequenceStateChanged_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, onRingTransferSequenceStateChanged_args args) throws org.apache.thrift.TException {
        iface.onRingTransferSequenceStateChanged(args.turretName, args.id, args.state);
        return null;
      }
    }

    public static class onRingTransferSequenceStateChangeError<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onRingTransferSequenceStateChangeError_args> {
      public onRingTransferSequenceStateChangeError() {
        super("onRingTransferSequenceStateChangeError");
      }

      @Override
      public onRingTransferSequenceStateChangeError_args getEmptyArgsInstance() {
        return new onRingTransferSequenceStateChangeError_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, onRingTransferSequenceStateChangeError_args args) throws org.apache.thrift.TException {
        iface.onRingTransferSequenceStateChangeError(args.turretName, args.id, args.errorCode, args.errorDescription);
        return null;
      }
    }

    public static class onInterfaceActionStateChanged<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onInterfaceActionStateChanged_args> {
      public onInterfaceActionStateChanged() {
        super("onInterfaceActionStateChanged");
      }

      @Override
      public onInterfaceActionStateChanged_args getEmptyArgsInstance() {
        return new onInterfaceActionStateChanged_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, onInterfaceActionStateChanged_args args) throws org.apache.thrift.TException {
        iface.onInterfaceActionStateChanged(args.turretName, args.apiName, args.state);
        return null;
      }
    }

    public static class onInterfaceActionKeyChanged<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onInterfaceActionKeyChanged_args> {
      public onInterfaceActionKeyChanged() {
        super("onInterfaceActionKeyChanged");
      }

      @Override
      public onInterfaceActionKeyChanged_args getEmptyArgsInstance() {
        return new onInterfaceActionKeyChanged_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, onInterfaceActionKeyChanged_args args) throws org.apache.thrift.TException {
        iface.onInterfaceActionKeyChanged(args.turretName, args.apiName, args.keyState);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("onLineStatesChanged", new onLineStatesChanged());
      processMap.put("onCallDataChanged", new onCallDataChanged());
      processMap.put("onCallDataChangedEx", new onCallDataChangedEx());
      processMap.put("onLoginStateChanged", new onLoginStateChanged());
      processMap.put("onLoginResponse", new onLoginResponse());
      processMap.put("onTopOfCallQueueChanged", new onTopOfCallQueueChanged());
      processMap.put("onRingTransferStateChanged", new onRingTransferStateChanged());
      processMap.put("onRingTransferStateChangeError", new onRingTransferStateChangeError());
      processMap.put("onRingTransferSequenceStateChanged", new onRingTransferSequenceStateChanged());
      processMap.put("onRingTransferSequenceStateChangeError", new onRingTransferSequenceStateChangeError());
      processMap.put("onInterfaceActionStateChanged", new onInterfaceActionStateChanged());
      processMap.put("onInterfaceActionKeyChanged", new onInterfaceActionKeyChanged());
      return processMap;
    }

    public static class onLineStatesChanged<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onLineStatesChanged_args, Void> {
      public onLineStatesChanged() {
        super("onLineStatesChanged");
      }

      @Override
      public onLineStatesChanged_args getEmptyArgsInstance() {
        return new onLineStatesChanged_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, onLineStatesChanged_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.onLineStatesChanged(args.turretName, args.states,resultHandler);
      }
    }

    public static class onCallDataChanged<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onCallDataChanged_args, Void> {
      public onCallDataChanged() {
        super("onCallDataChanged");
      }

      @Override
      public onCallDataChanged_args getEmptyArgsInstance() {
        return new onCallDataChanged_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, onCallDataChanged_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.onCallDataChanged(args.turretName, args.lineName, args.partyNumber, args.partyName, args.contactName,resultHandler);
      }
    }

    public static class onCallDataChangedEx<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onCallDataChangedEx_args, Void> {
      public onCallDataChangedEx() {
        super("onCallDataChangedEx");
      }

      @Override
      public onCallDataChangedEx_args getEmptyArgsInstance() {
        return new onCallDataChangedEx_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, onCallDataChangedEx_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.onCallDataChangedEx(args.turretName, args.callData,resultHandler);
      }
    }

    public static class onLoginStateChanged<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onLoginStateChanged_args, Void> {
      public onLoginStateChanged() {
        super("onLoginStateChanged");
      }

      @Override
      public onLoginStateChanged_args getEmptyArgsInstance() {
        return new onLoginStateChanged_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, onLoginStateChanged_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.onLoginStateChanged(args.turretName, args.state,resultHandler);
      }
    }

    public static class onLoginResponse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onLoginResponse_args, Void> {
      public onLoginResponse() {
        super("onLoginResponse");
      }

      @Override
      public onLoginResponse_args getEmptyArgsInstance() {
        return new onLoginResponse_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, onLoginResponse_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.onLoginResponse(args.turretName, args.errorCode, args.errorDescription,resultHandler);
      }
    }

    public static class onTopOfCallQueueChanged<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onTopOfCallQueueChanged_args, Void> {
      public onTopOfCallQueueChanged() {
        super("onTopOfCallQueueChanged");
      }

      @Override
      public onTopOfCallQueueChanged_args getEmptyArgsInstance() {
        return new onTopOfCallQueueChanged_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, onTopOfCallQueueChanged_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.onTopOfCallQueueChanged(args.turretName, args.lineName,resultHandler);
      }
    }

    public static class onRingTransferStateChanged<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onRingTransferStateChanged_args, Void> {
      public onRingTransferStateChanged() {
        super("onRingTransferStateChanged");
      }

      @Override
      public onRingTransferStateChanged_args getEmptyArgsInstance() {
        return new onRingTransferStateChanged_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, onRingTransferStateChanged_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.onRingTransferStateChanged(args.turretName, args.id, args.state,resultHandler);
      }
    }

    public static class onRingTransferStateChangeError<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onRingTransferStateChangeError_args, Void> {
      public onRingTransferStateChangeError() {
        super("onRingTransferStateChangeError");
      }

      @Override
      public onRingTransferStateChangeError_args getEmptyArgsInstance() {
        return new onRingTransferStateChangeError_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, onRingTransferStateChangeError_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.onRingTransferStateChangeError(args.turretName, args.id, args.errorCode, args.errorDescription,resultHandler);
      }
    }

    public static class onRingTransferSequenceStateChanged<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onRingTransferSequenceStateChanged_args, Void> {
      public onRingTransferSequenceStateChanged() {
        super("onRingTransferSequenceStateChanged");
      }

      @Override
      public onRingTransferSequenceStateChanged_args getEmptyArgsInstance() {
        return new onRingTransferSequenceStateChanged_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, onRingTransferSequenceStateChanged_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.onRingTransferSequenceStateChanged(args.turretName, args.id, args.state,resultHandler);
      }
    }

    public static class onRingTransferSequenceStateChangeError<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onRingTransferSequenceStateChangeError_args, Void> {
      public onRingTransferSequenceStateChangeError() {
        super("onRingTransferSequenceStateChangeError");
      }

      @Override
      public onRingTransferSequenceStateChangeError_args getEmptyArgsInstance() {
        return new onRingTransferSequenceStateChangeError_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, onRingTransferSequenceStateChangeError_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.onRingTransferSequenceStateChangeError(args.turretName, args.id, args.errorCode, args.errorDescription,resultHandler);
      }
    }

    public static class onInterfaceActionStateChanged<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onInterfaceActionStateChanged_args, Void> {
      public onInterfaceActionStateChanged() {
        super("onInterfaceActionStateChanged");
      }

      @Override
      public onInterfaceActionStateChanged_args getEmptyArgsInstance() {
        return new onInterfaceActionStateChanged_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, onInterfaceActionStateChanged_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.onInterfaceActionStateChanged(args.turretName, args.apiName, args.state,resultHandler);
      }
    }

    public static class onInterfaceActionKeyChanged<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onInterfaceActionKeyChanged_args, Void> {
      public onInterfaceActionKeyChanged() {
        super("onInterfaceActionKeyChanged");
      }

      @Override
      public onInterfaceActionKeyChanged_args getEmptyArgsInstance() {
        return new onInterfaceActionKeyChanged_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, onInterfaceActionKeyChanged_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.onInterfaceActionKeyChanged(args.turretName, args.apiName, args.keyState,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class onLineStatesChanged_args implements org.apache.thrift.TBase<onLineStatesChanged_args, onLineStatesChanged_args._Fields>, java.io.Serializable, Cloneable, Comparable<onLineStatesChanged_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onLineStatesChanged_args");

    private static final org.apache.thrift.protocol.TField TURRET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("turretName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("states", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onLineStatesChanged_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onLineStatesChanged_argsTupleSchemeFactory();

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String turretName; // required
    /**
     * Contains the name and the new state of the line.
     */
    public @org.apache.thrift.annotation.Nullable LineStatesData states; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Identifier of the turret specified at notification subscription.
       * It's an empty string if no name was specified at subscription.
       */
      TURRET_NAME((short)1, "turretName"),
      /**
       * Contains the name and the new state of the line.
       */
      STATES((short)2, "states");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TURRET_NAME
            return TURRET_NAME;
          case 2: // STATES
            return STATES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TURRET_NAME, new org.apache.thrift.meta_data.FieldMetaData("turretName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATES, new org.apache.thrift.meta_data.FieldMetaData("states", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LineStatesData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onLineStatesChanged_args.class, metaDataMap);
    }

    public onLineStatesChanged_args() {
    }

    public onLineStatesChanged_args(
      java.lang.String turretName,
      LineStatesData states)
    {
      this();
      this.turretName = turretName;
      this.states = states;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onLineStatesChanged_args(onLineStatesChanged_args other) {
      if (other.isSetTurretName()) {
        this.turretName = other.turretName;
      }
      if (other.isSetStates()) {
        this.states = new LineStatesData(other.states);
      }
    }

    @Override
    public onLineStatesChanged_args deepCopy() {
      return new onLineStatesChanged_args(this);
    }

    @Override
    public void clear() {
      this.turretName = null;
      this.states = null;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTurretName() {
      return this.turretName;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public onLineStatesChanged_args setTurretName(@org.apache.thrift.annotation.Nullable java.lang.String turretName) {
      this.turretName = turretName;
      return this;
    }

    public void unsetTurretName() {
      this.turretName = null;
    }

    /** Returns true if field turretName is set (has been assigned a value) and false otherwise */
    public boolean isSetTurretName() {
      return this.turretName != null;
    }

    public void setTurretNameIsSet(boolean value) {
      if (!value) {
        this.turretName = null;
      }
    }

    /**
     * Contains the name and the new state of the line.
     */
    @org.apache.thrift.annotation.Nullable
    public LineStatesData getStates() {
      return this.states;
    }

    /**
     * Contains the name and the new state of the line.
     */
    public onLineStatesChanged_args setStates(@org.apache.thrift.annotation.Nullable LineStatesData states) {
      this.states = states;
      return this;
    }

    public void unsetStates() {
      this.states = null;
    }

    /** Returns true if field states is set (has been assigned a value) and false otherwise */
    public boolean isSetStates() {
      return this.states != null;
    }

    public void setStatesIsSet(boolean value) {
      if (!value) {
        this.states = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TURRET_NAME:
        if (value == null) {
          unsetTurretName();
        } else {
          setTurretName((java.lang.String)value);
        }
        break;

      case STATES:
        if (value == null) {
          unsetStates();
        } else {
          setStates((LineStatesData)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TURRET_NAME:
        return getTurretName();

      case STATES:
        return getStates();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TURRET_NAME:
        return isSetTurretName();
      case STATES:
        return isSetStates();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof onLineStatesChanged_args)
        return this.equals((onLineStatesChanged_args)that);
      return false;
    }

    public boolean equals(onLineStatesChanged_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_turretName = true && this.isSetTurretName();
      boolean that_present_turretName = true && that.isSetTurretName();
      if (this_present_turretName || that_present_turretName) {
        if (!(this_present_turretName && that_present_turretName))
          return false;
        if (!this.turretName.equals(that.turretName))
          return false;
      }

      boolean this_present_states = true && this.isSetStates();
      boolean that_present_states = true && that.isSetStates();
      if (this_present_states || that_present_states) {
        if (!(this_present_states && that_present_states))
          return false;
        if (!this.states.equals(that.states))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTurretName()) ? 131071 : 524287);
      if (isSetTurretName())
        hashCode = hashCode * 8191 + turretName.hashCode();

      hashCode = hashCode * 8191 + ((isSetStates()) ? 131071 : 524287);
      if (isSetStates())
        hashCode = hashCode * 8191 + states.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(onLineStatesChanged_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTurretName(), other.isSetTurretName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTurretName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turretName, other.turretName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetStates(), other.isSetStates());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStates()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.states, other.states);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onLineStatesChanged_args(");
      boolean first = true;

      sb.append("turretName:");
      if (this.turretName == null) {
        sb.append("null");
      } else {
        sb.append(this.turretName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("states:");
      if (this.states == null) {
        sb.append("null");
      } else {
        sb.append(this.states);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (states != null) {
        states.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onLineStatesChanged_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onLineStatesChanged_argsStandardScheme getScheme() {
        return new onLineStatesChanged_argsStandardScheme();
      }
    }

    private static class onLineStatesChanged_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onLineStatesChanged_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, onLineStatesChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TURRET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.turretName = iprot.readString();
                struct.setTurretNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.states = new LineStatesData();
                struct.states.read(iprot);
                struct.setStatesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, onLineStatesChanged_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.turretName != null) {
          oprot.writeFieldBegin(TURRET_NAME_FIELD_DESC);
          oprot.writeString(struct.turretName);
          oprot.writeFieldEnd();
        }
        if (struct.states != null) {
          oprot.writeFieldBegin(STATES_FIELD_DESC);
          struct.states.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onLineStatesChanged_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onLineStatesChanged_argsTupleScheme getScheme() {
        return new onLineStatesChanged_argsTupleScheme();
      }
    }

    private static class onLineStatesChanged_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onLineStatesChanged_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onLineStatesChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTurretName()) {
          optionals.set(0);
        }
        if (struct.isSetStates()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTurretName()) {
          oprot.writeString(struct.turretName);
        }
        if (struct.isSetStates()) {
          struct.states.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onLineStatesChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.turretName = iprot.readString();
          struct.setTurretNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.states = new LineStatesData();
          struct.states.read(iprot);
          struct.setStatesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class onCallDataChanged_args implements org.apache.thrift.TBase<onCallDataChanged_args, onCallDataChanged_args._Fields>, java.io.Serializable, Cloneable, Comparable<onCallDataChanged_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onCallDataChanged_args");

    private static final org.apache.thrift.protocol.TField TURRET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("turretName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LINE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lineName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARTY_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("partyNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PARTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("partyName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CONTACT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contactName", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onCallDataChanged_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onCallDataChanged_argsTupleSchemeFactory();

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String turretName; // required
    /**
     * Name of the line.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String lineName; // required
    /**
     * Line number of the other party.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String partyNumber; // required
    /**
     * Name of the line as provided by the PBX, encoded in UTF-8.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String partyName; // required
    /**
     * Name of the calling party resolved from the contact list, encoded in UTF-8.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String contactName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Identifier of the turret specified at notification subscription.
       * It's an empty string if no name was specified at subscription.
       */
      TURRET_NAME((short)1, "turretName"),
      /**
       * Name of the line.
       */
      LINE_NAME((short)2, "lineName"),
      /**
       * Line number of the other party.
       */
      PARTY_NUMBER((short)3, "partyNumber"),
      /**
       * Name of the line as provided by the PBX, encoded in UTF-8.
       */
      PARTY_NAME((short)4, "partyName"),
      /**
       * Name of the calling party resolved from the contact list, encoded in UTF-8.
       */
      CONTACT_NAME((short)5, "contactName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TURRET_NAME
            return TURRET_NAME;
          case 2: // LINE_NAME
            return LINE_NAME;
          case 3: // PARTY_NUMBER
            return PARTY_NUMBER;
          case 4: // PARTY_NAME
            return PARTY_NAME;
          case 5: // CONTACT_NAME
            return CONTACT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TURRET_NAME, new org.apache.thrift.meta_data.FieldMetaData("turretName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINE_NAME, new org.apache.thrift.meta_data.FieldMetaData("lineName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "LineName")));
      tmpMap.put(_Fields.PARTY_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("partyNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("partyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTACT_NAME, new org.apache.thrift.meta_data.FieldMetaData("contactName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onCallDataChanged_args.class, metaDataMap);
    }

    public onCallDataChanged_args() {
    }

    public onCallDataChanged_args(
      java.lang.String turretName,
      java.lang.String lineName,
      java.lang.String partyNumber,
      java.lang.String partyName,
      java.lang.String contactName)
    {
      this();
      this.turretName = turretName;
      this.lineName = lineName;
      this.partyNumber = partyNumber;
      this.partyName = partyName;
      this.contactName = contactName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onCallDataChanged_args(onCallDataChanged_args other) {
      if (other.isSetTurretName()) {
        this.turretName = other.turretName;
      }
      if (other.isSetLineName()) {
        this.lineName = other.lineName;
      }
      if (other.isSetPartyNumber()) {
        this.partyNumber = other.partyNumber;
      }
      if (other.isSetPartyName()) {
        this.partyName = other.partyName;
      }
      if (other.isSetContactName()) {
        this.contactName = other.contactName;
      }
    }

    @Override
    public onCallDataChanged_args deepCopy() {
      return new onCallDataChanged_args(this);
    }

    @Override
    public void clear() {
      this.turretName = null;
      this.lineName = null;
      this.partyNumber = null;
      this.partyName = null;
      this.contactName = null;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTurretName() {
      return this.turretName;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public onCallDataChanged_args setTurretName(@org.apache.thrift.annotation.Nullable java.lang.String turretName) {
      this.turretName = turretName;
      return this;
    }

    public void unsetTurretName() {
      this.turretName = null;
    }

    /** Returns true if field turretName is set (has been assigned a value) and false otherwise */
    public boolean isSetTurretName() {
      return this.turretName != null;
    }

    public void setTurretNameIsSet(boolean value) {
      if (!value) {
        this.turretName = null;
      }
    }

    /**
     * Name of the line.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLineName() {
      return this.lineName;
    }

    /**
     * Name of the line.
     */
    public onCallDataChanged_args setLineName(@org.apache.thrift.annotation.Nullable java.lang.String lineName) {
      this.lineName = lineName;
      return this;
    }

    public void unsetLineName() {
      this.lineName = null;
    }

    /** Returns true if field lineName is set (has been assigned a value) and false otherwise */
    public boolean isSetLineName() {
      return this.lineName != null;
    }

    public void setLineNameIsSet(boolean value) {
      if (!value) {
        this.lineName = null;
      }
    }

    /**
     * Line number of the other party.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPartyNumber() {
      return this.partyNumber;
    }

    /**
     * Line number of the other party.
     */
    public onCallDataChanged_args setPartyNumber(@org.apache.thrift.annotation.Nullable java.lang.String partyNumber) {
      this.partyNumber = partyNumber;
      return this;
    }

    public void unsetPartyNumber() {
      this.partyNumber = null;
    }

    /** Returns true if field partyNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetPartyNumber() {
      return this.partyNumber != null;
    }

    public void setPartyNumberIsSet(boolean value) {
      if (!value) {
        this.partyNumber = null;
      }
    }

    /**
     * Name of the line as provided by the PBX, encoded in UTF-8.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPartyName() {
      return this.partyName;
    }

    /**
     * Name of the line as provided by the PBX, encoded in UTF-8.
     */
    public onCallDataChanged_args setPartyName(@org.apache.thrift.annotation.Nullable java.lang.String partyName) {
      this.partyName = partyName;
      return this;
    }

    public void unsetPartyName() {
      this.partyName = null;
    }

    /** Returns true if field partyName is set (has been assigned a value) and false otherwise */
    public boolean isSetPartyName() {
      return this.partyName != null;
    }

    public void setPartyNameIsSet(boolean value) {
      if (!value) {
        this.partyName = null;
      }
    }

    /**
     * Name of the calling party resolved from the contact list, encoded in UTF-8.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getContactName() {
      return this.contactName;
    }

    /**
     * Name of the calling party resolved from the contact list, encoded in UTF-8.
     */
    public onCallDataChanged_args setContactName(@org.apache.thrift.annotation.Nullable java.lang.String contactName) {
      this.contactName = contactName;
      return this;
    }

    public void unsetContactName() {
      this.contactName = null;
    }

    /** Returns true if field contactName is set (has been assigned a value) and false otherwise */
    public boolean isSetContactName() {
      return this.contactName != null;
    }

    public void setContactNameIsSet(boolean value) {
      if (!value) {
        this.contactName = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TURRET_NAME:
        if (value == null) {
          unsetTurretName();
        } else {
          setTurretName((java.lang.String)value);
        }
        break;

      case LINE_NAME:
        if (value == null) {
          unsetLineName();
        } else {
          setLineName((java.lang.String)value);
        }
        break;

      case PARTY_NUMBER:
        if (value == null) {
          unsetPartyNumber();
        } else {
          setPartyNumber((java.lang.String)value);
        }
        break;

      case PARTY_NAME:
        if (value == null) {
          unsetPartyName();
        } else {
          setPartyName((java.lang.String)value);
        }
        break;

      case CONTACT_NAME:
        if (value == null) {
          unsetContactName();
        } else {
          setContactName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TURRET_NAME:
        return getTurretName();

      case LINE_NAME:
        return getLineName();

      case PARTY_NUMBER:
        return getPartyNumber();

      case PARTY_NAME:
        return getPartyName();

      case CONTACT_NAME:
        return getContactName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TURRET_NAME:
        return isSetTurretName();
      case LINE_NAME:
        return isSetLineName();
      case PARTY_NUMBER:
        return isSetPartyNumber();
      case PARTY_NAME:
        return isSetPartyName();
      case CONTACT_NAME:
        return isSetContactName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof onCallDataChanged_args)
        return this.equals((onCallDataChanged_args)that);
      return false;
    }

    public boolean equals(onCallDataChanged_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_turretName = true && this.isSetTurretName();
      boolean that_present_turretName = true && that.isSetTurretName();
      if (this_present_turretName || that_present_turretName) {
        if (!(this_present_turretName && that_present_turretName))
          return false;
        if (!this.turretName.equals(that.turretName))
          return false;
      }

      boolean this_present_lineName = true && this.isSetLineName();
      boolean that_present_lineName = true && that.isSetLineName();
      if (this_present_lineName || that_present_lineName) {
        if (!(this_present_lineName && that_present_lineName))
          return false;
        if (!this.lineName.equals(that.lineName))
          return false;
      }

      boolean this_present_partyNumber = true && this.isSetPartyNumber();
      boolean that_present_partyNumber = true && that.isSetPartyNumber();
      if (this_present_partyNumber || that_present_partyNumber) {
        if (!(this_present_partyNumber && that_present_partyNumber))
          return false;
        if (!this.partyNumber.equals(that.partyNumber))
          return false;
      }

      boolean this_present_partyName = true && this.isSetPartyName();
      boolean that_present_partyName = true && that.isSetPartyName();
      if (this_present_partyName || that_present_partyName) {
        if (!(this_present_partyName && that_present_partyName))
          return false;
        if (!this.partyName.equals(that.partyName))
          return false;
      }

      boolean this_present_contactName = true && this.isSetContactName();
      boolean that_present_contactName = true && that.isSetContactName();
      if (this_present_contactName || that_present_contactName) {
        if (!(this_present_contactName && that_present_contactName))
          return false;
        if (!this.contactName.equals(that.contactName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTurretName()) ? 131071 : 524287);
      if (isSetTurretName())
        hashCode = hashCode * 8191 + turretName.hashCode();

      hashCode = hashCode * 8191 + ((isSetLineName()) ? 131071 : 524287);
      if (isSetLineName())
        hashCode = hashCode * 8191 + lineName.hashCode();

      hashCode = hashCode * 8191 + ((isSetPartyNumber()) ? 131071 : 524287);
      if (isSetPartyNumber())
        hashCode = hashCode * 8191 + partyNumber.hashCode();

      hashCode = hashCode * 8191 + ((isSetPartyName()) ? 131071 : 524287);
      if (isSetPartyName())
        hashCode = hashCode * 8191 + partyName.hashCode();

      hashCode = hashCode * 8191 + ((isSetContactName()) ? 131071 : 524287);
      if (isSetContactName())
        hashCode = hashCode * 8191 + contactName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(onCallDataChanged_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTurretName(), other.isSetTurretName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTurretName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turretName, other.turretName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLineName(), other.isSetLineName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLineName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineName, other.lineName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPartyNumber(), other.isSetPartyNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartyNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partyNumber, other.partyNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPartyName(), other.isSetPartyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partyName, other.partyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetContactName(), other.isSetContactName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContactName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactName, other.contactName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onCallDataChanged_args(");
      boolean first = true;

      sb.append("turretName:");
      if (this.turretName == null) {
        sb.append("null");
      } else {
        sb.append(this.turretName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lineName:");
      if (this.lineName == null) {
        sb.append("null");
      } else {
        sb.append(this.lineName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partyNumber:");
      if (this.partyNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.partyNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partyName:");
      if (this.partyName == null) {
        sb.append("null");
      } else {
        sb.append(this.partyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contactName:");
      if (this.contactName == null) {
        sb.append("null");
      } else {
        sb.append(this.contactName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onCallDataChanged_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onCallDataChanged_argsStandardScheme getScheme() {
        return new onCallDataChanged_argsStandardScheme();
      }
    }

    private static class onCallDataChanged_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onCallDataChanged_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, onCallDataChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TURRET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.turretName = iprot.readString();
                struct.setTurretNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LINE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lineName = iprot.readString();
                struct.setLineNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARTY_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partyNumber = iprot.readString();
                struct.setPartyNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARTY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partyName = iprot.readString();
                struct.setPartyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONTACT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contactName = iprot.readString();
                struct.setContactNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, onCallDataChanged_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.turretName != null) {
          oprot.writeFieldBegin(TURRET_NAME_FIELD_DESC);
          oprot.writeString(struct.turretName);
          oprot.writeFieldEnd();
        }
        if (struct.lineName != null) {
          oprot.writeFieldBegin(LINE_NAME_FIELD_DESC);
          oprot.writeString(struct.lineName);
          oprot.writeFieldEnd();
        }
        if (struct.partyNumber != null) {
          oprot.writeFieldBegin(PARTY_NUMBER_FIELD_DESC);
          oprot.writeString(struct.partyNumber);
          oprot.writeFieldEnd();
        }
        if (struct.partyName != null) {
          oprot.writeFieldBegin(PARTY_NAME_FIELD_DESC);
          oprot.writeString(struct.partyName);
          oprot.writeFieldEnd();
        }
        if (struct.contactName != null) {
          oprot.writeFieldBegin(CONTACT_NAME_FIELD_DESC);
          oprot.writeString(struct.contactName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onCallDataChanged_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onCallDataChanged_argsTupleScheme getScheme() {
        return new onCallDataChanged_argsTupleScheme();
      }
    }

    private static class onCallDataChanged_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onCallDataChanged_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onCallDataChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTurretName()) {
          optionals.set(0);
        }
        if (struct.isSetLineName()) {
          optionals.set(1);
        }
        if (struct.isSetPartyNumber()) {
          optionals.set(2);
        }
        if (struct.isSetPartyName()) {
          optionals.set(3);
        }
        if (struct.isSetContactName()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTurretName()) {
          oprot.writeString(struct.turretName);
        }
        if (struct.isSetLineName()) {
          oprot.writeString(struct.lineName);
        }
        if (struct.isSetPartyNumber()) {
          oprot.writeString(struct.partyNumber);
        }
        if (struct.isSetPartyName()) {
          oprot.writeString(struct.partyName);
        }
        if (struct.isSetContactName()) {
          oprot.writeString(struct.contactName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onCallDataChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.turretName = iprot.readString();
          struct.setTurretNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lineName = iprot.readString();
          struct.setLineNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.partyNumber = iprot.readString();
          struct.setPartyNumberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.partyName = iprot.readString();
          struct.setPartyNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.contactName = iprot.readString();
          struct.setContactNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class onCallDataChangedEx_args implements org.apache.thrift.TBase<onCallDataChangedEx_args, onCallDataChangedEx_args._Fields>, java.io.Serializable, Cloneable, Comparable<onCallDataChangedEx_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onCallDataChangedEx_args");

    private static final org.apache.thrift.protocol.TField TURRET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("turretName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CALL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("callData", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onCallDataChangedEx_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onCallDataChangedEx_argsTupleSchemeFactory();

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String turretName; // required
    public @org.apache.thrift.annotation.Nullable CallData callData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Identifier of the turret specified at notification subscription.
       * It's an empty string if no name was specified at subscription.
       */
      TURRET_NAME((short)1, "turretName"),
      CALL_DATA((short)2, "callData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TURRET_NAME
            return TURRET_NAME;
          case 2: // CALL_DATA
            return CALL_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TURRET_NAME, new org.apache.thrift.meta_data.FieldMetaData("turretName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CALL_DATA, new org.apache.thrift.meta_data.FieldMetaData("callData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CallData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onCallDataChangedEx_args.class, metaDataMap);
    }

    public onCallDataChangedEx_args() {
    }

    public onCallDataChangedEx_args(
      java.lang.String turretName,
      CallData callData)
    {
      this();
      this.turretName = turretName;
      this.callData = callData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onCallDataChangedEx_args(onCallDataChangedEx_args other) {
      if (other.isSetTurretName()) {
        this.turretName = other.turretName;
      }
      if (other.isSetCallData()) {
        this.callData = new CallData(other.callData);
      }
    }

    @Override
    public onCallDataChangedEx_args deepCopy() {
      return new onCallDataChangedEx_args(this);
    }

    @Override
    public void clear() {
      this.turretName = null;
      this.callData = null;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTurretName() {
      return this.turretName;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public onCallDataChangedEx_args setTurretName(@org.apache.thrift.annotation.Nullable java.lang.String turretName) {
      this.turretName = turretName;
      return this;
    }

    public void unsetTurretName() {
      this.turretName = null;
    }

    /** Returns true if field turretName is set (has been assigned a value) and false otherwise */
    public boolean isSetTurretName() {
      return this.turretName != null;
    }

    public void setTurretNameIsSet(boolean value) {
      if (!value) {
        this.turretName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public CallData getCallData() {
      return this.callData;
    }

    public onCallDataChangedEx_args setCallData(@org.apache.thrift.annotation.Nullable CallData callData) {
      this.callData = callData;
      return this;
    }

    public void unsetCallData() {
      this.callData = null;
    }

    /** Returns true if field callData is set (has been assigned a value) and false otherwise */
    public boolean isSetCallData() {
      return this.callData != null;
    }

    public void setCallDataIsSet(boolean value) {
      if (!value) {
        this.callData = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TURRET_NAME:
        if (value == null) {
          unsetTurretName();
        } else {
          setTurretName((java.lang.String)value);
        }
        break;

      case CALL_DATA:
        if (value == null) {
          unsetCallData();
        } else {
          setCallData((CallData)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TURRET_NAME:
        return getTurretName();

      case CALL_DATA:
        return getCallData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TURRET_NAME:
        return isSetTurretName();
      case CALL_DATA:
        return isSetCallData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof onCallDataChangedEx_args)
        return this.equals((onCallDataChangedEx_args)that);
      return false;
    }

    public boolean equals(onCallDataChangedEx_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_turretName = true && this.isSetTurretName();
      boolean that_present_turretName = true && that.isSetTurretName();
      if (this_present_turretName || that_present_turretName) {
        if (!(this_present_turretName && that_present_turretName))
          return false;
        if (!this.turretName.equals(that.turretName))
          return false;
      }

      boolean this_present_callData = true && this.isSetCallData();
      boolean that_present_callData = true && that.isSetCallData();
      if (this_present_callData || that_present_callData) {
        if (!(this_present_callData && that_present_callData))
          return false;
        if (!this.callData.equals(that.callData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTurretName()) ? 131071 : 524287);
      if (isSetTurretName())
        hashCode = hashCode * 8191 + turretName.hashCode();

      hashCode = hashCode * 8191 + ((isSetCallData()) ? 131071 : 524287);
      if (isSetCallData())
        hashCode = hashCode * 8191 + callData.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(onCallDataChangedEx_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTurretName(), other.isSetTurretName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTurretName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turretName, other.turretName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCallData(), other.isSetCallData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callData, other.callData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onCallDataChangedEx_args(");
      boolean first = true;

      sb.append("turretName:");
      if (this.turretName == null) {
        sb.append("null");
      } else {
        sb.append(this.turretName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("callData:");
      if (this.callData == null) {
        sb.append("null");
      } else {
        sb.append(this.callData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (callData != null) {
        callData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onCallDataChangedEx_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onCallDataChangedEx_argsStandardScheme getScheme() {
        return new onCallDataChangedEx_argsStandardScheme();
      }
    }

    private static class onCallDataChangedEx_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onCallDataChangedEx_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, onCallDataChangedEx_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TURRET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.turretName = iprot.readString();
                struct.setTurretNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALL_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.callData = new CallData();
                struct.callData.read(iprot);
                struct.setCallDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, onCallDataChangedEx_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.turretName != null) {
          oprot.writeFieldBegin(TURRET_NAME_FIELD_DESC);
          oprot.writeString(struct.turretName);
          oprot.writeFieldEnd();
        }
        if (struct.callData != null) {
          oprot.writeFieldBegin(CALL_DATA_FIELD_DESC);
          struct.callData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onCallDataChangedEx_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onCallDataChangedEx_argsTupleScheme getScheme() {
        return new onCallDataChangedEx_argsTupleScheme();
      }
    }

    private static class onCallDataChangedEx_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onCallDataChangedEx_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onCallDataChangedEx_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTurretName()) {
          optionals.set(0);
        }
        if (struct.isSetCallData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTurretName()) {
          oprot.writeString(struct.turretName);
        }
        if (struct.isSetCallData()) {
          struct.callData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onCallDataChangedEx_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.turretName = iprot.readString();
          struct.setTurretNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.callData = new CallData();
          struct.callData.read(iprot);
          struct.setCallDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class onLoginStateChanged_args implements org.apache.thrift.TBase<onLoginStateChanged_args, onLoginStateChanged_args._Fields>, java.io.Serializable, Cloneable, Comparable<onLoginStateChanged_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onLoginStateChanged_args");

    private static final org.apache.thrift.protocol.TField TURRET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("turretName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onLoginStateChanged_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onLoginStateChanged_argsTupleSchemeFactory();

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String turretName; // required
    /**
     * New login state of the turret.
     * 
     * @see TurretState
     */
    public @org.apache.thrift.annotation.Nullable TurretState state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Identifier of the turret specified at notification subscription.
       * It's an empty string if no name was specified at subscription.
       */
      TURRET_NAME((short)1, "turretName"),
      /**
       * New login state of the turret.
       * 
       * @see TurretState
       */
      STATE((short)2, "state");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TURRET_NAME
            return TURRET_NAME;
          case 2: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TURRET_NAME, new org.apache.thrift.meta_data.FieldMetaData("turretName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TurretState.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onLoginStateChanged_args.class, metaDataMap);
    }

    public onLoginStateChanged_args() {
    }

    public onLoginStateChanged_args(
      java.lang.String turretName,
      TurretState state)
    {
      this();
      this.turretName = turretName;
      this.state = state;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onLoginStateChanged_args(onLoginStateChanged_args other) {
      if (other.isSetTurretName()) {
        this.turretName = other.turretName;
      }
      if (other.isSetState()) {
        this.state = other.state;
      }
    }

    @Override
    public onLoginStateChanged_args deepCopy() {
      return new onLoginStateChanged_args(this);
    }

    @Override
    public void clear() {
      this.turretName = null;
      this.state = null;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTurretName() {
      return this.turretName;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public onLoginStateChanged_args setTurretName(@org.apache.thrift.annotation.Nullable java.lang.String turretName) {
      this.turretName = turretName;
      return this;
    }

    public void unsetTurretName() {
      this.turretName = null;
    }

    /** Returns true if field turretName is set (has been assigned a value) and false otherwise */
    public boolean isSetTurretName() {
      return this.turretName != null;
    }

    public void setTurretNameIsSet(boolean value) {
      if (!value) {
        this.turretName = null;
      }
    }

    /**
     * New login state of the turret.
     * 
     * @see TurretState
     */
    @org.apache.thrift.annotation.Nullable
    public TurretState getState() {
      return this.state;
    }

    /**
     * New login state of the turret.
     * 
     * @see TurretState
     */
    public onLoginStateChanged_args setState(@org.apache.thrift.annotation.Nullable TurretState state) {
      this.state = state;
      return this;
    }

    public void unsetState() {
      this.state = null;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return this.state != null;
    }

    public void setStateIsSet(boolean value) {
      if (!value) {
        this.state = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TURRET_NAME:
        if (value == null) {
          unsetTurretName();
        } else {
          setTurretName((java.lang.String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((TurretState)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TURRET_NAME:
        return getTurretName();

      case STATE:
        return getState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TURRET_NAME:
        return isSetTurretName();
      case STATE:
        return isSetState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof onLoginStateChanged_args)
        return this.equals((onLoginStateChanged_args)that);
      return false;
    }

    public boolean equals(onLoginStateChanged_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_turretName = true && this.isSetTurretName();
      boolean that_present_turretName = true && that.isSetTurretName();
      if (this_present_turretName || that_present_turretName) {
        if (!(this_present_turretName && that_present_turretName))
          return false;
        if (!this.turretName.equals(that.turretName))
          return false;
      }

      boolean this_present_state = true && this.isSetState();
      boolean that_present_state = true && that.isSetState();
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (!this.state.equals(that.state))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTurretName()) ? 131071 : 524287);
      if (isSetTurretName())
        hashCode = hashCode * 8191 + turretName.hashCode();

      hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
      if (isSetState())
        hashCode = hashCode * 8191 + state.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(onLoginStateChanged_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTurretName(), other.isSetTurretName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTurretName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turretName, other.turretName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onLoginStateChanged_args(");
      boolean first = true;

      sb.append("turretName:");
      if (this.turretName == null) {
        sb.append("null");
      } else {
        sb.append(this.turretName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onLoginStateChanged_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onLoginStateChanged_argsStandardScheme getScheme() {
        return new onLoginStateChanged_argsStandardScheme();
      }
    }

    private static class onLoginStateChanged_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onLoginStateChanged_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, onLoginStateChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TURRET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.turretName = iprot.readString();
                struct.setTurretNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = com.unify.osx.turret.api.TurretState.findByValue(iprot.readI32());
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, onLoginStateChanged_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.turretName != null) {
          oprot.writeFieldBegin(TURRET_NAME_FIELD_DESC);
          oprot.writeString(struct.turretName);
          oprot.writeFieldEnd();
        }
        if (struct.state != null) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeI32(struct.state.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onLoginStateChanged_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onLoginStateChanged_argsTupleScheme getScheme() {
        return new onLoginStateChanged_argsTupleScheme();
      }
    }

    private static class onLoginStateChanged_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onLoginStateChanged_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onLoginStateChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTurretName()) {
          optionals.set(0);
        }
        if (struct.isSetState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTurretName()) {
          oprot.writeString(struct.turretName);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onLoginStateChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.turretName = iprot.readString();
          struct.setTurretNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.state = com.unify.osx.turret.api.TurretState.findByValue(iprot.readI32());
          struct.setStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class onLoginResponse_args implements org.apache.thrift.TBase<onLoginResponse_args, onLoginResponse_args._Fields>, java.io.Serializable, Cloneable, Comparable<onLoginResponse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onLoginResponse_args");

    private static final org.apache.thrift.protocol.TField TURRET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("turretName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ERROR_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("errorDescription", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onLoginResponse_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onLoginResponse_argsTupleSchemeFactory();

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String turretName; // required
    /**
     * Error code (see :ref:`Constants`)
     */
    public int errorCode; // required
    /**
     * Short text description of the error
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String errorDescription; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Identifier of the turret specified at notification subscription.
       * It's an empty string if no name was specified at subscription.
       */
      TURRET_NAME((short)1, "turretName"),
      /**
       * Error code (see :ref:`Constants`)
       */
      ERROR_CODE((short)2, "errorCode"),
      /**
       * Short text description of the error
       */
      ERROR_DESCRIPTION((short)3, "errorDescription");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TURRET_NAME
            return TURRET_NAME;
          case 2: // ERROR_CODE
            return ERROR_CODE;
          case 3: // ERROR_DESCRIPTION
            return ERROR_DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ERRORCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TURRET_NAME, new org.apache.thrift.meta_data.FieldMetaData("turretName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TurretErrorCode")));
      tmpMap.put(_Fields.ERROR_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("errorDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onLoginResponse_args.class, metaDataMap);
    }

    public onLoginResponse_args() {
    }

    public onLoginResponse_args(
      java.lang.String turretName,
      int errorCode,
      java.lang.String errorDescription)
    {
      this();
      this.turretName = turretName;
      this.errorCode = errorCode;
      setErrorCodeIsSet(true);
      this.errorDescription = errorDescription;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onLoginResponse_args(onLoginResponse_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTurretName()) {
        this.turretName = other.turretName;
      }
      this.errorCode = other.errorCode;
      if (other.isSetErrorDescription()) {
        this.errorDescription = other.errorDescription;
      }
    }

    @Override
    public onLoginResponse_args deepCopy() {
      return new onLoginResponse_args(this);
    }

    @Override
    public void clear() {
      this.turretName = null;
      setErrorCodeIsSet(false);
      this.errorCode = 0;
      this.errorDescription = null;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTurretName() {
      return this.turretName;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public onLoginResponse_args setTurretName(@org.apache.thrift.annotation.Nullable java.lang.String turretName) {
      this.turretName = turretName;
      return this;
    }

    public void unsetTurretName() {
      this.turretName = null;
    }

    /** Returns true if field turretName is set (has been assigned a value) and false otherwise */
    public boolean isSetTurretName() {
      return this.turretName != null;
    }

    public void setTurretNameIsSet(boolean value) {
      if (!value) {
        this.turretName = null;
      }
    }

    /**
     * Error code (see :ref:`Constants`)
     */
    public int getErrorCode() {
      return this.errorCode;
    }

    /**
     * Error code (see :ref:`Constants`)
     */
    public onLoginResponse_args setErrorCode(int errorCode) {
      this.errorCode = errorCode;
      setErrorCodeIsSet(true);
      return this;
    }

    public void unsetErrorCode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
    }

    /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorCode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
    }

    public void setErrorCodeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRORCODE_ISSET_ID, value);
    }

    /**
     * Short text description of the error
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getErrorDescription() {
      return this.errorDescription;
    }

    /**
     * Short text description of the error
     */
    public onLoginResponse_args setErrorDescription(@org.apache.thrift.annotation.Nullable java.lang.String errorDescription) {
      this.errorDescription = errorDescription;
      return this;
    }

    public void unsetErrorDescription() {
      this.errorDescription = null;
    }

    /** Returns true if field errorDescription is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorDescription() {
      return this.errorDescription != null;
    }

    public void setErrorDescriptionIsSet(boolean value) {
      if (!value) {
        this.errorDescription = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TURRET_NAME:
        if (value == null) {
          unsetTurretName();
        } else {
          setTurretName((java.lang.String)value);
        }
        break;

      case ERROR_CODE:
        if (value == null) {
          unsetErrorCode();
        } else {
          setErrorCode((java.lang.Integer)value);
        }
        break;

      case ERROR_DESCRIPTION:
        if (value == null) {
          unsetErrorDescription();
        } else {
          setErrorDescription((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TURRET_NAME:
        return getTurretName();

      case ERROR_CODE:
        return getErrorCode();

      case ERROR_DESCRIPTION:
        return getErrorDescription();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TURRET_NAME:
        return isSetTurretName();
      case ERROR_CODE:
        return isSetErrorCode();
      case ERROR_DESCRIPTION:
        return isSetErrorDescription();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof onLoginResponse_args)
        return this.equals((onLoginResponse_args)that);
      return false;
    }

    public boolean equals(onLoginResponse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_turretName = true && this.isSetTurretName();
      boolean that_present_turretName = true && that.isSetTurretName();
      if (this_present_turretName || that_present_turretName) {
        if (!(this_present_turretName && that_present_turretName))
          return false;
        if (!this.turretName.equals(that.turretName))
          return false;
      }

      boolean this_present_errorCode = true;
      boolean that_present_errorCode = true;
      if (this_present_errorCode || that_present_errorCode) {
        if (!(this_present_errorCode && that_present_errorCode))
          return false;
        if (this.errorCode != that.errorCode)
          return false;
      }

      boolean this_present_errorDescription = true && this.isSetErrorDescription();
      boolean that_present_errorDescription = true && that.isSetErrorDescription();
      if (this_present_errorDescription || that_present_errorDescription) {
        if (!(this_present_errorDescription && that_present_errorDescription))
          return false;
        if (!this.errorDescription.equals(that.errorDescription))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTurretName()) ? 131071 : 524287);
      if (isSetTurretName())
        hashCode = hashCode * 8191 + turretName.hashCode();

      hashCode = hashCode * 8191 + errorCode;

      hashCode = hashCode * 8191 + ((isSetErrorDescription()) ? 131071 : 524287);
      if (isSetErrorDescription())
        hashCode = hashCode * 8191 + errorDescription.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(onLoginResponse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTurretName(), other.isSetTurretName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTurretName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turretName, other.turretName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetErrorCode(), other.isSetErrorCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetErrorDescription(), other.isSetErrorDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorDescription, other.errorDescription);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onLoginResponse_args(");
      boolean first = true;

      sb.append("turretName:");
      if (this.turretName == null) {
        sb.append("null");
      } else {
        sb.append(this.turretName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      sb.append(this.errorCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorDescription:");
      if (this.errorDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.errorDescription);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onLoginResponse_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onLoginResponse_argsStandardScheme getScheme() {
        return new onLoginResponse_argsStandardScheme();
      }
    }

    private static class onLoginResponse_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onLoginResponse_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, onLoginResponse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TURRET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.turretName = iprot.readString();
                struct.setTurretNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERROR_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.errorCode = iprot.readI32();
                struct.setErrorCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERROR_DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.errorDescription = iprot.readString();
                struct.setErrorDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, onLoginResponse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.turretName != null) {
          oprot.writeFieldBegin(TURRET_NAME_FIELD_DESC);
          oprot.writeString(struct.turretName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.errorCode);
        oprot.writeFieldEnd();
        if (struct.errorDescription != null) {
          oprot.writeFieldBegin(ERROR_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.errorDescription);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onLoginResponse_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onLoginResponse_argsTupleScheme getScheme() {
        return new onLoginResponse_argsTupleScheme();
      }
    }

    private static class onLoginResponse_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onLoginResponse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onLoginResponse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTurretName()) {
          optionals.set(0);
        }
        if (struct.isSetErrorCode()) {
          optionals.set(1);
        }
        if (struct.isSetErrorDescription()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTurretName()) {
          oprot.writeString(struct.turretName);
        }
        if (struct.isSetErrorCode()) {
          oprot.writeI32(struct.errorCode);
        }
        if (struct.isSetErrorDescription()) {
          oprot.writeString(struct.errorDescription);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onLoginResponse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.turretName = iprot.readString();
          struct.setTurretNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.errorCode = iprot.readI32();
          struct.setErrorCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.errorDescription = iprot.readString();
          struct.setErrorDescriptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class onTopOfCallQueueChanged_args implements org.apache.thrift.TBase<onTopOfCallQueueChanged_args, onTopOfCallQueueChanged_args._Fields>, java.io.Serializable, Cloneable, Comparable<onTopOfCallQueueChanged_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onTopOfCallQueueChanged_args");

    private static final org.apache.thrift.protocol.TField TURRET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("turretName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LINE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lineName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onTopOfCallQueueChanged_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onTopOfCallQueueChanged_argsTupleSchemeFactory();

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String turretName; // required
    /**
     * Name of the line at the top of the call queue or an empty string if there is none.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String lineName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Identifier of the turret specified at notification subscription.
       * It's an empty string if no name was specified at subscription.
       */
      TURRET_NAME((short)1, "turretName"),
      /**
       * Name of the line at the top of the call queue or an empty string if there is none.
       */
      LINE_NAME((short)2, "lineName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TURRET_NAME
            return TURRET_NAME;
          case 2: // LINE_NAME
            return LINE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TURRET_NAME, new org.apache.thrift.meta_data.FieldMetaData("turretName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINE_NAME, new org.apache.thrift.meta_data.FieldMetaData("lineName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "LineName")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onTopOfCallQueueChanged_args.class, metaDataMap);
    }

    public onTopOfCallQueueChanged_args() {
    }

    public onTopOfCallQueueChanged_args(
      java.lang.String turretName,
      java.lang.String lineName)
    {
      this();
      this.turretName = turretName;
      this.lineName = lineName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onTopOfCallQueueChanged_args(onTopOfCallQueueChanged_args other) {
      if (other.isSetTurretName()) {
        this.turretName = other.turretName;
      }
      if (other.isSetLineName()) {
        this.lineName = other.lineName;
      }
    }

    @Override
    public onTopOfCallQueueChanged_args deepCopy() {
      return new onTopOfCallQueueChanged_args(this);
    }

    @Override
    public void clear() {
      this.turretName = null;
      this.lineName = null;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTurretName() {
      return this.turretName;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public onTopOfCallQueueChanged_args setTurretName(@org.apache.thrift.annotation.Nullable java.lang.String turretName) {
      this.turretName = turretName;
      return this;
    }

    public void unsetTurretName() {
      this.turretName = null;
    }

    /** Returns true if field turretName is set (has been assigned a value) and false otherwise */
    public boolean isSetTurretName() {
      return this.turretName != null;
    }

    public void setTurretNameIsSet(boolean value) {
      if (!value) {
        this.turretName = null;
      }
    }

    /**
     * Name of the line at the top of the call queue or an empty string if there is none.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLineName() {
      return this.lineName;
    }

    /**
     * Name of the line at the top of the call queue or an empty string if there is none.
     */
    public onTopOfCallQueueChanged_args setLineName(@org.apache.thrift.annotation.Nullable java.lang.String lineName) {
      this.lineName = lineName;
      return this;
    }

    public void unsetLineName() {
      this.lineName = null;
    }

    /** Returns true if field lineName is set (has been assigned a value) and false otherwise */
    public boolean isSetLineName() {
      return this.lineName != null;
    }

    public void setLineNameIsSet(boolean value) {
      if (!value) {
        this.lineName = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TURRET_NAME:
        if (value == null) {
          unsetTurretName();
        } else {
          setTurretName((java.lang.String)value);
        }
        break;

      case LINE_NAME:
        if (value == null) {
          unsetLineName();
        } else {
          setLineName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TURRET_NAME:
        return getTurretName();

      case LINE_NAME:
        return getLineName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TURRET_NAME:
        return isSetTurretName();
      case LINE_NAME:
        return isSetLineName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof onTopOfCallQueueChanged_args)
        return this.equals((onTopOfCallQueueChanged_args)that);
      return false;
    }

    public boolean equals(onTopOfCallQueueChanged_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_turretName = true && this.isSetTurretName();
      boolean that_present_turretName = true && that.isSetTurretName();
      if (this_present_turretName || that_present_turretName) {
        if (!(this_present_turretName && that_present_turretName))
          return false;
        if (!this.turretName.equals(that.turretName))
          return false;
      }

      boolean this_present_lineName = true && this.isSetLineName();
      boolean that_present_lineName = true && that.isSetLineName();
      if (this_present_lineName || that_present_lineName) {
        if (!(this_present_lineName && that_present_lineName))
          return false;
        if (!this.lineName.equals(that.lineName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTurretName()) ? 131071 : 524287);
      if (isSetTurretName())
        hashCode = hashCode * 8191 + turretName.hashCode();

      hashCode = hashCode * 8191 + ((isSetLineName()) ? 131071 : 524287);
      if (isSetLineName())
        hashCode = hashCode * 8191 + lineName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(onTopOfCallQueueChanged_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTurretName(), other.isSetTurretName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTurretName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turretName, other.turretName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLineName(), other.isSetLineName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLineName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineName, other.lineName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onTopOfCallQueueChanged_args(");
      boolean first = true;

      sb.append("turretName:");
      if (this.turretName == null) {
        sb.append("null");
      } else {
        sb.append(this.turretName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lineName:");
      if (this.lineName == null) {
        sb.append("null");
      } else {
        sb.append(this.lineName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onTopOfCallQueueChanged_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onTopOfCallQueueChanged_argsStandardScheme getScheme() {
        return new onTopOfCallQueueChanged_argsStandardScheme();
      }
    }

    private static class onTopOfCallQueueChanged_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onTopOfCallQueueChanged_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, onTopOfCallQueueChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TURRET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.turretName = iprot.readString();
                struct.setTurretNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LINE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lineName = iprot.readString();
                struct.setLineNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, onTopOfCallQueueChanged_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.turretName != null) {
          oprot.writeFieldBegin(TURRET_NAME_FIELD_DESC);
          oprot.writeString(struct.turretName);
          oprot.writeFieldEnd();
        }
        if (struct.lineName != null) {
          oprot.writeFieldBegin(LINE_NAME_FIELD_DESC);
          oprot.writeString(struct.lineName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onTopOfCallQueueChanged_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onTopOfCallQueueChanged_argsTupleScheme getScheme() {
        return new onTopOfCallQueueChanged_argsTupleScheme();
      }
    }

    private static class onTopOfCallQueueChanged_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onTopOfCallQueueChanged_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onTopOfCallQueueChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTurretName()) {
          optionals.set(0);
        }
        if (struct.isSetLineName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTurretName()) {
          oprot.writeString(struct.turretName);
        }
        if (struct.isSetLineName()) {
          oprot.writeString(struct.lineName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onTopOfCallQueueChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.turretName = iprot.readString();
          struct.setTurretNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lineName = iprot.readString();
          struct.setLineNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class onRingTransferStateChanged_args implements org.apache.thrift.TBase<onRingTransferStateChanged_args, onRingTransferStateChanged_args._Fields>, java.io.Serializable, Cloneable, Comparable<onRingTransferStateChanged_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onRingTransferStateChanged_args");

    private static final org.apache.thrift.protocol.TField TURRET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("turretName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onRingTransferStateChanged_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onRingTransferStateChanged_argsTupleSchemeFactory();

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String turretName; // required
    /**
     * Identifier of the ring transfer
     */
    public @org.apache.thrift.annotation.Nullable RingTransferId id; // required
    /**
     * The new state of the ring transfer
     * 
     * @see RingTransferState
     */
    public @org.apache.thrift.annotation.Nullable RingTransferState state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Identifier of the turret specified at notification subscription.
       * It's an empty string if no name was specified at subscription.
       */
      TURRET_NAME((short)1, "turretName"),
      /**
       * Identifier of the ring transfer
       */
      ID((short)2, "id"),
      /**
       * The new state of the ring transfer
       * 
       * @see RingTransferState
       */
      STATE((short)3, "state");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TURRET_NAME
            return TURRET_NAME;
          case 2: // ID
            return ID;
          case 3: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TURRET_NAME, new org.apache.thrift.meta_data.FieldMetaData("turretName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RingTransferId.class)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RingTransferState.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onRingTransferStateChanged_args.class, metaDataMap);
    }

    public onRingTransferStateChanged_args() {
    }

    public onRingTransferStateChanged_args(
      java.lang.String turretName,
      RingTransferId id,
      RingTransferState state)
    {
      this();
      this.turretName = turretName;
      this.id = id;
      this.state = state;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onRingTransferStateChanged_args(onRingTransferStateChanged_args other) {
      if (other.isSetTurretName()) {
        this.turretName = other.turretName;
      }
      if (other.isSetId()) {
        this.id = new RingTransferId(other.id);
      }
      if (other.isSetState()) {
        this.state = other.state;
      }
    }

    @Override
    public onRingTransferStateChanged_args deepCopy() {
      return new onRingTransferStateChanged_args(this);
    }

    @Override
    public void clear() {
      this.turretName = null;
      this.id = null;
      this.state = null;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTurretName() {
      return this.turretName;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public onRingTransferStateChanged_args setTurretName(@org.apache.thrift.annotation.Nullable java.lang.String turretName) {
      this.turretName = turretName;
      return this;
    }

    public void unsetTurretName() {
      this.turretName = null;
    }

    /** Returns true if field turretName is set (has been assigned a value) and false otherwise */
    public boolean isSetTurretName() {
      return this.turretName != null;
    }

    public void setTurretNameIsSet(boolean value) {
      if (!value) {
        this.turretName = null;
      }
    }

    /**
     * Identifier of the ring transfer
     */
    @org.apache.thrift.annotation.Nullable
    public RingTransferId getId() {
      return this.id;
    }

    /**
     * Identifier of the ring transfer
     */
    public onRingTransferStateChanged_args setId(@org.apache.thrift.annotation.Nullable RingTransferId id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    /**
     * The new state of the ring transfer
     * 
     * @see RingTransferState
     */
    @org.apache.thrift.annotation.Nullable
    public RingTransferState getState() {
      return this.state;
    }

    /**
     * The new state of the ring transfer
     * 
     * @see RingTransferState
     */
    public onRingTransferStateChanged_args setState(@org.apache.thrift.annotation.Nullable RingTransferState state) {
      this.state = state;
      return this;
    }

    public void unsetState() {
      this.state = null;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return this.state != null;
    }

    public void setStateIsSet(boolean value) {
      if (!value) {
        this.state = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TURRET_NAME:
        if (value == null) {
          unsetTurretName();
        } else {
          setTurretName((java.lang.String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((RingTransferId)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((RingTransferState)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TURRET_NAME:
        return getTurretName();

      case ID:
        return getId();

      case STATE:
        return getState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TURRET_NAME:
        return isSetTurretName();
      case ID:
        return isSetId();
      case STATE:
        return isSetState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof onRingTransferStateChanged_args)
        return this.equals((onRingTransferStateChanged_args)that);
      return false;
    }

    public boolean equals(onRingTransferStateChanged_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_turretName = true && this.isSetTurretName();
      boolean that_present_turretName = true && that.isSetTurretName();
      if (this_present_turretName || that_present_turretName) {
        if (!(this_present_turretName && that_present_turretName))
          return false;
        if (!this.turretName.equals(that.turretName))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_state = true && this.isSetState();
      boolean that_present_state = true && that.isSetState();
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (!this.state.equals(that.state))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTurretName()) ? 131071 : 524287);
      if (isSetTurretName())
        hashCode = hashCode * 8191 + turretName.hashCode();

      hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
      if (isSetId())
        hashCode = hashCode * 8191 + id.hashCode();

      hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
      if (isSetState())
        hashCode = hashCode * 8191 + state.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(onRingTransferStateChanged_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTurretName(), other.isSetTurretName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTurretName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turretName, other.turretName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onRingTransferStateChanged_args(");
      boolean first = true;

      sb.append("turretName:");
      if (this.turretName == null) {
        sb.append("null");
      } else {
        sb.append(this.turretName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (id != null) {
        id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onRingTransferStateChanged_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onRingTransferStateChanged_argsStandardScheme getScheme() {
        return new onRingTransferStateChanged_argsStandardScheme();
      }
    }

    private static class onRingTransferStateChanged_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onRingTransferStateChanged_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, onRingTransferStateChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TURRET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.turretName = iprot.readString();
                struct.setTurretNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.id = new RingTransferId();
                struct.id.read(iprot);
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = com.unify.osx.turret.api.RingTransferState.findByValue(iprot.readI32());
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, onRingTransferStateChanged_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.turretName != null) {
          oprot.writeFieldBegin(TURRET_NAME_FIELD_DESC);
          oprot.writeString(struct.turretName);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.state != null) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeI32(struct.state.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onRingTransferStateChanged_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onRingTransferStateChanged_argsTupleScheme getScheme() {
        return new onRingTransferStateChanged_argsTupleScheme();
      }
    }

    private static class onRingTransferStateChanged_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onRingTransferStateChanged_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onRingTransferStateChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTurretName()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        if (struct.isSetState()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTurretName()) {
          oprot.writeString(struct.turretName);
        }
        if (struct.isSetId()) {
          struct.id.write(oprot);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onRingTransferStateChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.turretName = iprot.readString();
          struct.setTurretNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = new RingTransferId();
          struct.id.read(iprot);
          struct.setIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.state = com.unify.osx.turret.api.RingTransferState.findByValue(iprot.readI32());
          struct.setStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class onRingTransferStateChangeError_args implements org.apache.thrift.TBase<onRingTransferStateChangeError_args, onRingTransferStateChangeError_args._Fields>, java.io.Serializable, Cloneable, Comparable<onRingTransferStateChangeError_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onRingTransferStateChangeError_args");

    private static final org.apache.thrift.protocol.TField TURRET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("turretName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ERROR_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("errorDescription", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onRingTransferStateChangeError_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onRingTransferStateChangeError_argsTupleSchemeFactory();

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String turretName; // required
    /**
     * Identifier of the ring transfer
     */
    public @org.apache.thrift.annotation.Nullable RingTransferId id; // required
    /**
     * Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
     */
    public int errorCode; // required
    /**
     * Short text description of the error
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String errorDescription; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Identifier of the turret specified at notification subscription.
       * It's an empty string if no name was specified at subscription.
       */
      TURRET_NAME((short)1, "turretName"),
      /**
       * Identifier of the ring transfer
       */
      ID((short)2, "id"),
      /**
       * Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
       */
      ERROR_CODE((short)3, "errorCode"),
      /**
       * Short text description of the error
       */
      ERROR_DESCRIPTION((short)4, "errorDescription");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TURRET_NAME
            return TURRET_NAME;
          case 2: // ID
            return ID;
          case 3: // ERROR_CODE
            return ERROR_CODE;
          case 4: // ERROR_DESCRIPTION
            return ERROR_DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ERRORCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TURRET_NAME, new org.apache.thrift.meta_data.FieldMetaData("turretName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RingTransferId.class)));
      tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TurretErrorCode")));
      tmpMap.put(_Fields.ERROR_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("errorDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onRingTransferStateChangeError_args.class, metaDataMap);
    }

    public onRingTransferStateChangeError_args() {
    }

    public onRingTransferStateChangeError_args(
      java.lang.String turretName,
      RingTransferId id,
      int errorCode,
      java.lang.String errorDescription)
    {
      this();
      this.turretName = turretName;
      this.id = id;
      this.errorCode = errorCode;
      setErrorCodeIsSet(true);
      this.errorDescription = errorDescription;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onRingTransferStateChangeError_args(onRingTransferStateChangeError_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTurretName()) {
        this.turretName = other.turretName;
      }
      if (other.isSetId()) {
        this.id = new RingTransferId(other.id);
      }
      this.errorCode = other.errorCode;
      if (other.isSetErrorDescription()) {
        this.errorDescription = other.errorDescription;
      }
    }

    @Override
    public onRingTransferStateChangeError_args deepCopy() {
      return new onRingTransferStateChangeError_args(this);
    }

    @Override
    public void clear() {
      this.turretName = null;
      this.id = null;
      setErrorCodeIsSet(false);
      this.errorCode = 0;
      this.errorDescription = null;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTurretName() {
      return this.turretName;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public onRingTransferStateChangeError_args setTurretName(@org.apache.thrift.annotation.Nullable java.lang.String turretName) {
      this.turretName = turretName;
      return this;
    }

    public void unsetTurretName() {
      this.turretName = null;
    }

    /** Returns true if field turretName is set (has been assigned a value) and false otherwise */
    public boolean isSetTurretName() {
      return this.turretName != null;
    }

    public void setTurretNameIsSet(boolean value) {
      if (!value) {
        this.turretName = null;
      }
    }

    /**
     * Identifier of the ring transfer
     */
    @org.apache.thrift.annotation.Nullable
    public RingTransferId getId() {
      return this.id;
    }

    /**
     * Identifier of the ring transfer
     */
    public onRingTransferStateChangeError_args setId(@org.apache.thrift.annotation.Nullable RingTransferId id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    /**
     * Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
     */
    public int getErrorCode() {
      return this.errorCode;
    }

    /**
     * Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
     */
    public onRingTransferStateChangeError_args setErrorCode(int errorCode) {
      this.errorCode = errorCode;
      setErrorCodeIsSet(true);
      return this;
    }

    public void unsetErrorCode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
    }

    /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorCode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
    }

    public void setErrorCodeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRORCODE_ISSET_ID, value);
    }

    /**
     * Short text description of the error
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getErrorDescription() {
      return this.errorDescription;
    }

    /**
     * Short text description of the error
     */
    public onRingTransferStateChangeError_args setErrorDescription(@org.apache.thrift.annotation.Nullable java.lang.String errorDescription) {
      this.errorDescription = errorDescription;
      return this;
    }

    public void unsetErrorDescription() {
      this.errorDescription = null;
    }

    /** Returns true if field errorDescription is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorDescription() {
      return this.errorDescription != null;
    }

    public void setErrorDescriptionIsSet(boolean value) {
      if (!value) {
        this.errorDescription = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TURRET_NAME:
        if (value == null) {
          unsetTurretName();
        } else {
          setTurretName((java.lang.String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((RingTransferId)value);
        }
        break;

      case ERROR_CODE:
        if (value == null) {
          unsetErrorCode();
        } else {
          setErrorCode((java.lang.Integer)value);
        }
        break;

      case ERROR_DESCRIPTION:
        if (value == null) {
          unsetErrorDescription();
        } else {
          setErrorDescription((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TURRET_NAME:
        return getTurretName();

      case ID:
        return getId();

      case ERROR_CODE:
        return getErrorCode();

      case ERROR_DESCRIPTION:
        return getErrorDescription();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TURRET_NAME:
        return isSetTurretName();
      case ID:
        return isSetId();
      case ERROR_CODE:
        return isSetErrorCode();
      case ERROR_DESCRIPTION:
        return isSetErrorDescription();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof onRingTransferStateChangeError_args)
        return this.equals((onRingTransferStateChangeError_args)that);
      return false;
    }

    public boolean equals(onRingTransferStateChangeError_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_turretName = true && this.isSetTurretName();
      boolean that_present_turretName = true && that.isSetTurretName();
      if (this_present_turretName || that_present_turretName) {
        if (!(this_present_turretName && that_present_turretName))
          return false;
        if (!this.turretName.equals(that.turretName))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_errorCode = true;
      boolean that_present_errorCode = true;
      if (this_present_errorCode || that_present_errorCode) {
        if (!(this_present_errorCode && that_present_errorCode))
          return false;
        if (this.errorCode != that.errorCode)
          return false;
      }

      boolean this_present_errorDescription = true && this.isSetErrorDescription();
      boolean that_present_errorDescription = true && that.isSetErrorDescription();
      if (this_present_errorDescription || that_present_errorDescription) {
        if (!(this_present_errorDescription && that_present_errorDescription))
          return false;
        if (!this.errorDescription.equals(that.errorDescription))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTurretName()) ? 131071 : 524287);
      if (isSetTurretName())
        hashCode = hashCode * 8191 + turretName.hashCode();

      hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
      if (isSetId())
        hashCode = hashCode * 8191 + id.hashCode();

      hashCode = hashCode * 8191 + errorCode;

      hashCode = hashCode * 8191 + ((isSetErrorDescription()) ? 131071 : 524287);
      if (isSetErrorDescription())
        hashCode = hashCode * 8191 + errorDescription.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(onRingTransferStateChangeError_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTurretName(), other.isSetTurretName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTurretName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turretName, other.turretName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetErrorCode(), other.isSetErrorCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetErrorDescription(), other.isSetErrorDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorDescription, other.errorDescription);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onRingTransferStateChangeError_args(");
      boolean first = true;

      sb.append("turretName:");
      if (this.turretName == null) {
        sb.append("null");
      } else {
        sb.append(this.turretName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      sb.append(this.errorCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorDescription:");
      if (this.errorDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.errorDescription);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (id != null) {
        id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onRingTransferStateChangeError_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onRingTransferStateChangeError_argsStandardScheme getScheme() {
        return new onRingTransferStateChangeError_argsStandardScheme();
      }
    }

    private static class onRingTransferStateChangeError_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onRingTransferStateChangeError_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, onRingTransferStateChangeError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TURRET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.turretName = iprot.readString();
                struct.setTurretNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.id = new RingTransferId();
                struct.id.read(iprot);
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERROR_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.errorCode = iprot.readI32();
                struct.setErrorCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ERROR_DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.errorDescription = iprot.readString();
                struct.setErrorDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, onRingTransferStateChangeError_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.turretName != null) {
          oprot.writeFieldBegin(TURRET_NAME_FIELD_DESC);
          oprot.writeString(struct.turretName);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.errorCode);
        oprot.writeFieldEnd();
        if (struct.errorDescription != null) {
          oprot.writeFieldBegin(ERROR_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.errorDescription);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onRingTransferStateChangeError_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onRingTransferStateChangeError_argsTupleScheme getScheme() {
        return new onRingTransferStateChangeError_argsTupleScheme();
      }
    }

    private static class onRingTransferStateChangeError_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onRingTransferStateChangeError_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onRingTransferStateChangeError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTurretName()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        if (struct.isSetErrorCode()) {
          optionals.set(2);
        }
        if (struct.isSetErrorDescription()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTurretName()) {
          oprot.writeString(struct.turretName);
        }
        if (struct.isSetId()) {
          struct.id.write(oprot);
        }
        if (struct.isSetErrorCode()) {
          oprot.writeI32(struct.errorCode);
        }
        if (struct.isSetErrorDescription()) {
          oprot.writeString(struct.errorDescription);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onRingTransferStateChangeError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.turretName = iprot.readString();
          struct.setTurretNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = new RingTransferId();
          struct.id.read(iprot);
          struct.setIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.errorCode = iprot.readI32();
          struct.setErrorCodeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.errorDescription = iprot.readString();
          struct.setErrorDescriptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class onRingTransferSequenceStateChanged_args implements org.apache.thrift.TBase<onRingTransferSequenceStateChanged_args, onRingTransferSequenceStateChanged_args._Fields>, java.io.Serializable, Cloneable, Comparable<onRingTransferSequenceStateChanged_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onRingTransferSequenceStateChanged_args");

    private static final org.apache.thrift.protocol.TField TURRET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("turretName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onRingTransferSequenceStateChanged_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onRingTransferSequenceStateChanged_argsTupleSchemeFactory();

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String turretName; // required
    /**
     * Identifier of the ring transfer sequence
     */
    public @org.apache.thrift.annotation.Nullable RingTransferId id; // required
    /**
     * The new state of the ring transfer sequence
     * 
     * @see RingTransferSequenceState
     */
    public @org.apache.thrift.annotation.Nullable RingTransferSequenceState state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Identifier of the turret specified at notification subscription.
       * It's an empty string if no name was specified at subscription.
       */
      TURRET_NAME((short)1, "turretName"),
      /**
       * Identifier of the ring transfer sequence
       */
      ID((short)2, "id"),
      /**
       * The new state of the ring transfer sequence
       * 
       * @see RingTransferSequenceState
       */
      STATE((short)3, "state");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TURRET_NAME
            return TURRET_NAME;
          case 2: // ID
            return ID;
          case 3: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TURRET_NAME, new org.apache.thrift.meta_data.FieldMetaData("turretName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RingTransferId.class)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RingTransferSequenceState.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onRingTransferSequenceStateChanged_args.class, metaDataMap);
    }

    public onRingTransferSequenceStateChanged_args() {
    }

    public onRingTransferSequenceStateChanged_args(
      java.lang.String turretName,
      RingTransferId id,
      RingTransferSequenceState state)
    {
      this();
      this.turretName = turretName;
      this.id = id;
      this.state = state;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onRingTransferSequenceStateChanged_args(onRingTransferSequenceStateChanged_args other) {
      if (other.isSetTurretName()) {
        this.turretName = other.turretName;
      }
      if (other.isSetId()) {
        this.id = new RingTransferId(other.id);
      }
      if (other.isSetState()) {
        this.state = other.state;
      }
    }

    @Override
    public onRingTransferSequenceStateChanged_args deepCopy() {
      return new onRingTransferSequenceStateChanged_args(this);
    }

    @Override
    public void clear() {
      this.turretName = null;
      this.id = null;
      this.state = null;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTurretName() {
      return this.turretName;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public onRingTransferSequenceStateChanged_args setTurretName(@org.apache.thrift.annotation.Nullable java.lang.String turretName) {
      this.turretName = turretName;
      return this;
    }

    public void unsetTurretName() {
      this.turretName = null;
    }

    /** Returns true if field turretName is set (has been assigned a value) and false otherwise */
    public boolean isSetTurretName() {
      return this.turretName != null;
    }

    public void setTurretNameIsSet(boolean value) {
      if (!value) {
        this.turretName = null;
      }
    }

    /**
     * Identifier of the ring transfer sequence
     */
    @org.apache.thrift.annotation.Nullable
    public RingTransferId getId() {
      return this.id;
    }

    /**
     * Identifier of the ring transfer sequence
     */
    public onRingTransferSequenceStateChanged_args setId(@org.apache.thrift.annotation.Nullable RingTransferId id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    /**
     * The new state of the ring transfer sequence
     * 
     * @see RingTransferSequenceState
     */
    @org.apache.thrift.annotation.Nullable
    public RingTransferSequenceState getState() {
      return this.state;
    }

    /**
     * The new state of the ring transfer sequence
     * 
     * @see RingTransferSequenceState
     */
    public onRingTransferSequenceStateChanged_args setState(@org.apache.thrift.annotation.Nullable RingTransferSequenceState state) {
      this.state = state;
      return this;
    }

    public void unsetState() {
      this.state = null;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return this.state != null;
    }

    public void setStateIsSet(boolean value) {
      if (!value) {
        this.state = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TURRET_NAME:
        if (value == null) {
          unsetTurretName();
        } else {
          setTurretName((java.lang.String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((RingTransferId)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((RingTransferSequenceState)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TURRET_NAME:
        return getTurretName();

      case ID:
        return getId();

      case STATE:
        return getState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TURRET_NAME:
        return isSetTurretName();
      case ID:
        return isSetId();
      case STATE:
        return isSetState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof onRingTransferSequenceStateChanged_args)
        return this.equals((onRingTransferSequenceStateChanged_args)that);
      return false;
    }

    public boolean equals(onRingTransferSequenceStateChanged_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_turretName = true && this.isSetTurretName();
      boolean that_present_turretName = true && that.isSetTurretName();
      if (this_present_turretName || that_present_turretName) {
        if (!(this_present_turretName && that_present_turretName))
          return false;
        if (!this.turretName.equals(that.turretName))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_state = true && this.isSetState();
      boolean that_present_state = true && that.isSetState();
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (!this.state.equals(that.state))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTurretName()) ? 131071 : 524287);
      if (isSetTurretName())
        hashCode = hashCode * 8191 + turretName.hashCode();

      hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
      if (isSetId())
        hashCode = hashCode * 8191 + id.hashCode();

      hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
      if (isSetState())
        hashCode = hashCode * 8191 + state.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(onRingTransferSequenceStateChanged_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTurretName(), other.isSetTurretName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTurretName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turretName, other.turretName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onRingTransferSequenceStateChanged_args(");
      boolean first = true;

      sb.append("turretName:");
      if (this.turretName == null) {
        sb.append("null");
      } else {
        sb.append(this.turretName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (id != null) {
        id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onRingTransferSequenceStateChanged_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onRingTransferSequenceStateChanged_argsStandardScheme getScheme() {
        return new onRingTransferSequenceStateChanged_argsStandardScheme();
      }
    }

    private static class onRingTransferSequenceStateChanged_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onRingTransferSequenceStateChanged_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, onRingTransferSequenceStateChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TURRET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.turretName = iprot.readString();
                struct.setTurretNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.id = new RingTransferId();
                struct.id.read(iprot);
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = com.unify.osx.turret.api.RingTransferSequenceState.findByValue(iprot.readI32());
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, onRingTransferSequenceStateChanged_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.turretName != null) {
          oprot.writeFieldBegin(TURRET_NAME_FIELD_DESC);
          oprot.writeString(struct.turretName);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.state != null) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeI32(struct.state.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onRingTransferSequenceStateChanged_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onRingTransferSequenceStateChanged_argsTupleScheme getScheme() {
        return new onRingTransferSequenceStateChanged_argsTupleScheme();
      }
    }

    private static class onRingTransferSequenceStateChanged_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onRingTransferSequenceStateChanged_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onRingTransferSequenceStateChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTurretName()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        if (struct.isSetState()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTurretName()) {
          oprot.writeString(struct.turretName);
        }
        if (struct.isSetId()) {
          struct.id.write(oprot);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onRingTransferSequenceStateChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.turretName = iprot.readString();
          struct.setTurretNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = new RingTransferId();
          struct.id.read(iprot);
          struct.setIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.state = com.unify.osx.turret.api.RingTransferSequenceState.findByValue(iprot.readI32());
          struct.setStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class onRingTransferSequenceStateChangeError_args implements org.apache.thrift.TBase<onRingTransferSequenceStateChangeError_args, onRingTransferSequenceStateChangeError_args._Fields>, java.io.Serializable, Cloneable, Comparable<onRingTransferSequenceStateChangeError_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onRingTransferSequenceStateChangeError_args");

    private static final org.apache.thrift.protocol.TField TURRET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("turretName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ERROR_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("errorDescription", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onRingTransferSequenceStateChangeError_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onRingTransferSequenceStateChangeError_argsTupleSchemeFactory();

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String turretName; // required
    /**
     * Identifier of the ring transfer sequence
     */
    public @org.apache.thrift.annotation.Nullable RingTransferId id; // required
    /**
     * Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
     */
    public int errorCode; // required
    /**
     * Short text description of the error
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String errorDescription; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Identifier of the turret specified at notification subscription.
       * It's an empty string if no name was specified at subscription.
       */
      TURRET_NAME((short)1, "turretName"),
      /**
       * Identifier of the ring transfer sequence
       */
      ID((short)2, "id"),
      /**
       * Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
       */
      ERROR_CODE((short)3, "errorCode"),
      /**
       * Short text description of the error
       */
      ERROR_DESCRIPTION((short)4, "errorDescription");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TURRET_NAME
            return TURRET_NAME;
          case 2: // ID
            return ID;
          case 3: // ERROR_CODE
            return ERROR_CODE;
          case 4: // ERROR_DESCRIPTION
            return ERROR_DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ERRORCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TURRET_NAME, new org.apache.thrift.meta_data.FieldMetaData("turretName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RingTransferId.class)));
      tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TurretErrorCode")));
      tmpMap.put(_Fields.ERROR_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("errorDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onRingTransferSequenceStateChangeError_args.class, metaDataMap);
    }

    public onRingTransferSequenceStateChangeError_args() {
    }

    public onRingTransferSequenceStateChangeError_args(
      java.lang.String turretName,
      RingTransferId id,
      int errorCode,
      java.lang.String errorDescription)
    {
      this();
      this.turretName = turretName;
      this.id = id;
      this.errorCode = errorCode;
      setErrorCodeIsSet(true);
      this.errorDescription = errorDescription;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onRingTransferSequenceStateChangeError_args(onRingTransferSequenceStateChangeError_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTurretName()) {
        this.turretName = other.turretName;
      }
      if (other.isSetId()) {
        this.id = new RingTransferId(other.id);
      }
      this.errorCode = other.errorCode;
      if (other.isSetErrorDescription()) {
        this.errorDescription = other.errorDescription;
      }
    }

    @Override
    public onRingTransferSequenceStateChangeError_args deepCopy() {
      return new onRingTransferSequenceStateChangeError_args(this);
    }

    @Override
    public void clear() {
      this.turretName = null;
      this.id = null;
      setErrorCodeIsSet(false);
      this.errorCode = 0;
      this.errorDescription = null;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTurretName() {
      return this.turretName;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public onRingTransferSequenceStateChangeError_args setTurretName(@org.apache.thrift.annotation.Nullable java.lang.String turretName) {
      this.turretName = turretName;
      return this;
    }

    public void unsetTurretName() {
      this.turretName = null;
    }

    /** Returns true if field turretName is set (has been assigned a value) and false otherwise */
    public boolean isSetTurretName() {
      return this.turretName != null;
    }

    public void setTurretNameIsSet(boolean value) {
      if (!value) {
        this.turretName = null;
      }
    }

    /**
     * Identifier of the ring transfer sequence
     */
    @org.apache.thrift.annotation.Nullable
    public RingTransferId getId() {
      return this.id;
    }

    /**
     * Identifier of the ring transfer sequence
     */
    public onRingTransferSequenceStateChangeError_args setId(@org.apache.thrift.annotation.Nullable RingTransferId id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    /**
     * Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
     */
    public int getErrorCode() {
      return this.errorCode;
    }

    /**
     * Error code (see :thrift:typedef:`TurretApi.TurretErrorCode`)
     */
    public onRingTransferSequenceStateChangeError_args setErrorCode(int errorCode) {
      this.errorCode = errorCode;
      setErrorCodeIsSet(true);
      return this;
    }

    public void unsetErrorCode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
    }

    /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorCode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
    }

    public void setErrorCodeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRORCODE_ISSET_ID, value);
    }

    /**
     * Short text description of the error
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getErrorDescription() {
      return this.errorDescription;
    }

    /**
     * Short text description of the error
     */
    public onRingTransferSequenceStateChangeError_args setErrorDescription(@org.apache.thrift.annotation.Nullable java.lang.String errorDescription) {
      this.errorDescription = errorDescription;
      return this;
    }

    public void unsetErrorDescription() {
      this.errorDescription = null;
    }

    /** Returns true if field errorDescription is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorDescription() {
      return this.errorDescription != null;
    }

    public void setErrorDescriptionIsSet(boolean value) {
      if (!value) {
        this.errorDescription = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TURRET_NAME:
        if (value == null) {
          unsetTurretName();
        } else {
          setTurretName((java.lang.String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((RingTransferId)value);
        }
        break;

      case ERROR_CODE:
        if (value == null) {
          unsetErrorCode();
        } else {
          setErrorCode((java.lang.Integer)value);
        }
        break;

      case ERROR_DESCRIPTION:
        if (value == null) {
          unsetErrorDescription();
        } else {
          setErrorDescription((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TURRET_NAME:
        return getTurretName();

      case ID:
        return getId();

      case ERROR_CODE:
        return getErrorCode();

      case ERROR_DESCRIPTION:
        return getErrorDescription();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TURRET_NAME:
        return isSetTurretName();
      case ID:
        return isSetId();
      case ERROR_CODE:
        return isSetErrorCode();
      case ERROR_DESCRIPTION:
        return isSetErrorDescription();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof onRingTransferSequenceStateChangeError_args)
        return this.equals((onRingTransferSequenceStateChangeError_args)that);
      return false;
    }

    public boolean equals(onRingTransferSequenceStateChangeError_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_turretName = true && this.isSetTurretName();
      boolean that_present_turretName = true && that.isSetTurretName();
      if (this_present_turretName || that_present_turretName) {
        if (!(this_present_turretName && that_present_turretName))
          return false;
        if (!this.turretName.equals(that.turretName))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_errorCode = true;
      boolean that_present_errorCode = true;
      if (this_present_errorCode || that_present_errorCode) {
        if (!(this_present_errorCode && that_present_errorCode))
          return false;
        if (this.errorCode != that.errorCode)
          return false;
      }

      boolean this_present_errorDescription = true && this.isSetErrorDescription();
      boolean that_present_errorDescription = true && that.isSetErrorDescription();
      if (this_present_errorDescription || that_present_errorDescription) {
        if (!(this_present_errorDescription && that_present_errorDescription))
          return false;
        if (!this.errorDescription.equals(that.errorDescription))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTurretName()) ? 131071 : 524287);
      if (isSetTurretName())
        hashCode = hashCode * 8191 + turretName.hashCode();

      hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
      if (isSetId())
        hashCode = hashCode * 8191 + id.hashCode();

      hashCode = hashCode * 8191 + errorCode;

      hashCode = hashCode * 8191 + ((isSetErrorDescription()) ? 131071 : 524287);
      if (isSetErrorDescription())
        hashCode = hashCode * 8191 + errorDescription.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(onRingTransferSequenceStateChangeError_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTurretName(), other.isSetTurretName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTurretName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turretName, other.turretName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetErrorCode(), other.isSetErrorCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetErrorDescription(), other.isSetErrorDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorDescription, other.errorDescription);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onRingTransferSequenceStateChangeError_args(");
      boolean first = true;

      sb.append("turretName:");
      if (this.turretName == null) {
        sb.append("null");
      } else {
        sb.append(this.turretName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      sb.append(this.errorCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorDescription:");
      if (this.errorDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.errorDescription);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (id != null) {
        id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onRingTransferSequenceStateChangeError_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onRingTransferSequenceStateChangeError_argsStandardScheme getScheme() {
        return new onRingTransferSequenceStateChangeError_argsStandardScheme();
      }
    }

    private static class onRingTransferSequenceStateChangeError_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onRingTransferSequenceStateChangeError_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, onRingTransferSequenceStateChangeError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TURRET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.turretName = iprot.readString();
                struct.setTurretNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.id = new RingTransferId();
                struct.id.read(iprot);
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERROR_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.errorCode = iprot.readI32();
                struct.setErrorCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ERROR_DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.errorDescription = iprot.readString();
                struct.setErrorDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, onRingTransferSequenceStateChangeError_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.turretName != null) {
          oprot.writeFieldBegin(TURRET_NAME_FIELD_DESC);
          oprot.writeString(struct.turretName);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.errorCode);
        oprot.writeFieldEnd();
        if (struct.errorDescription != null) {
          oprot.writeFieldBegin(ERROR_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.errorDescription);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onRingTransferSequenceStateChangeError_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onRingTransferSequenceStateChangeError_argsTupleScheme getScheme() {
        return new onRingTransferSequenceStateChangeError_argsTupleScheme();
      }
    }

    private static class onRingTransferSequenceStateChangeError_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onRingTransferSequenceStateChangeError_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onRingTransferSequenceStateChangeError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTurretName()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        if (struct.isSetErrorCode()) {
          optionals.set(2);
        }
        if (struct.isSetErrorDescription()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTurretName()) {
          oprot.writeString(struct.turretName);
        }
        if (struct.isSetId()) {
          struct.id.write(oprot);
        }
        if (struct.isSetErrorCode()) {
          oprot.writeI32(struct.errorCode);
        }
        if (struct.isSetErrorDescription()) {
          oprot.writeString(struct.errorDescription);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onRingTransferSequenceStateChangeError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.turretName = iprot.readString();
          struct.setTurretNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = new RingTransferId();
          struct.id.read(iprot);
          struct.setIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.errorCode = iprot.readI32();
          struct.setErrorCodeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.errorDescription = iprot.readString();
          struct.setErrorDescriptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class onInterfaceActionStateChanged_args implements org.apache.thrift.TBase<onInterfaceActionStateChanged_args, onInterfaceActionStateChanged_args._Fields>, java.io.Serializable, Cloneable, Comparable<onInterfaceActionStateChanged_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onInterfaceActionStateChanged_args");

    private static final org.apache.thrift.protocol.TField TURRET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("turretName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField API_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("apiName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onInterfaceActionStateChanged_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onInterfaceActionStateChanged_argsTupleSchemeFactory();

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String turretName; // required
    /**
     * Identifier of the interface action
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String apiName; // required
    /**
     * The new state of the interface action
     */
    public @org.apache.thrift.annotation.Nullable InterfaceActionState state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Identifier of the turret specified at notification subscription.
       * It's an empty string if no name was specified at subscription.
       */
      TURRET_NAME((short)1, "turretName"),
      /**
       * Identifier of the interface action
       */
      API_NAME((short)2, "apiName"),
      /**
       * The new state of the interface action
       */
      STATE((short)3, "state");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TURRET_NAME
            return TURRET_NAME;
          case 2: // API_NAME
            return API_NAME;
          case 3: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TURRET_NAME, new org.apache.thrift.meta_data.FieldMetaData("turretName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.API_NAME, new org.apache.thrift.meta_data.FieldMetaData("apiName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InterfaceActionState.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onInterfaceActionStateChanged_args.class, metaDataMap);
    }

    public onInterfaceActionStateChanged_args() {
    }

    public onInterfaceActionStateChanged_args(
      java.lang.String turretName,
      java.lang.String apiName,
      InterfaceActionState state)
    {
      this();
      this.turretName = turretName;
      this.apiName = apiName;
      this.state = state;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onInterfaceActionStateChanged_args(onInterfaceActionStateChanged_args other) {
      if (other.isSetTurretName()) {
        this.turretName = other.turretName;
      }
      if (other.isSetApiName()) {
        this.apiName = other.apiName;
      }
      if (other.isSetState()) {
        this.state = new InterfaceActionState(other.state);
      }
    }

    @Override
    public onInterfaceActionStateChanged_args deepCopy() {
      return new onInterfaceActionStateChanged_args(this);
    }

    @Override
    public void clear() {
      this.turretName = null;
      this.apiName = null;
      this.state = null;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTurretName() {
      return this.turretName;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public onInterfaceActionStateChanged_args setTurretName(@org.apache.thrift.annotation.Nullable java.lang.String turretName) {
      this.turretName = turretName;
      return this;
    }

    public void unsetTurretName() {
      this.turretName = null;
    }

    /** Returns true if field turretName is set (has been assigned a value) and false otherwise */
    public boolean isSetTurretName() {
      return this.turretName != null;
    }

    public void setTurretNameIsSet(boolean value) {
      if (!value) {
        this.turretName = null;
      }
    }

    /**
     * Identifier of the interface action
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getApiName() {
      return this.apiName;
    }

    /**
     * Identifier of the interface action
     */
    public onInterfaceActionStateChanged_args setApiName(@org.apache.thrift.annotation.Nullable java.lang.String apiName) {
      this.apiName = apiName;
      return this;
    }

    public void unsetApiName() {
      this.apiName = null;
    }

    /** Returns true if field apiName is set (has been assigned a value) and false otherwise */
    public boolean isSetApiName() {
      return this.apiName != null;
    }

    public void setApiNameIsSet(boolean value) {
      if (!value) {
        this.apiName = null;
      }
    }

    /**
     * The new state of the interface action
     */
    @org.apache.thrift.annotation.Nullable
    public InterfaceActionState getState() {
      return this.state;
    }

    /**
     * The new state of the interface action
     */
    public onInterfaceActionStateChanged_args setState(@org.apache.thrift.annotation.Nullable InterfaceActionState state) {
      this.state = state;
      return this;
    }

    public void unsetState() {
      this.state = null;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return this.state != null;
    }

    public void setStateIsSet(boolean value) {
      if (!value) {
        this.state = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TURRET_NAME:
        if (value == null) {
          unsetTurretName();
        } else {
          setTurretName((java.lang.String)value);
        }
        break;

      case API_NAME:
        if (value == null) {
          unsetApiName();
        } else {
          setApiName((java.lang.String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((InterfaceActionState)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TURRET_NAME:
        return getTurretName();

      case API_NAME:
        return getApiName();

      case STATE:
        return getState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TURRET_NAME:
        return isSetTurretName();
      case API_NAME:
        return isSetApiName();
      case STATE:
        return isSetState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof onInterfaceActionStateChanged_args)
        return this.equals((onInterfaceActionStateChanged_args)that);
      return false;
    }

    public boolean equals(onInterfaceActionStateChanged_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_turretName = true && this.isSetTurretName();
      boolean that_present_turretName = true && that.isSetTurretName();
      if (this_present_turretName || that_present_turretName) {
        if (!(this_present_turretName && that_present_turretName))
          return false;
        if (!this.turretName.equals(that.turretName))
          return false;
      }

      boolean this_present_apiName = true && this.isSetApiName();
      boolean that_present_apiName = true && that.isSetApiName();
      if (this_present_apiName || that_present_apiName) {
        if (!(this_present_apiName && that_present_apiName))
          return false;
        if (!this.apiName.equals(that.apiName))
          return false;
      }

      boolean this_present_state = true && this.isSetState();
      boolean that_present_state = true && that.isSetState();
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (!this.state.equals(that.state))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTurretName()) ? 131071 : 524287);
      if (isSetTurretName())
        hashCode = hashCode * 8191 + turretName.hashCode();

      hashCode = hashCode * 8191 + ((isSetApiName()) ? 131071 : 524287);
      if (isSetApiName())
        hashCode = hashCode * 8191 + apiName.hashCode();

      hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
      if (isSetState())
        hashCode = hashCode * 8191 + state.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(onInterfaceActionStateChanged_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTurretName(), other.isSetTurretName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTurretName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turretName, other.turretName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetApiName(), other.isSetApiName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiName, other.apiName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onInterfaceActionStateChanged_args(");
      boolean first = true;

      sb.append("turretName:");
      if (this.turretName == null) {
        sb.append("null");
      } else {
        sb.append(this.turretName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apiName:");
      if (this.apiName == null) {
        sb.append("null");
      } else {
        sb.append(this.apiName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (state != null) {
        state.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onInterfaceActionStateChanged_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onInterfaceActionStateChanged_argsStandardScheme getScheme() {
        return new onInterfaceActionStateChanged_argsStandardScheme();
      }
    }

    private static class onInterfaceActionStateChanged_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onInterfaceActionStateChanged_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, onInterfaceActionStateChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TURRET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.turretName = iprot.readString();
                struct.setTurretNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // API_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apiName = iprot.readString();
                struct.setApiNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.state = new InterfaceActionState();
                struct.state.read(iprot);
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, onInterfaceActionStateChanged_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.turretName != null) {
          oprot.writeFieldBegin(TURRET_NAME_FIELD_DESC);
          oprot.writeString(struct.turretName);
          oprot.writeFieldEnd();
        }
        if (struct.apiName != null) {
          oprot.writeFieldBegin(API_NAME_FIELD_DESC);
          oprot.writeString(struct.apiName);
          oprot.writeFieldEnd();
        }
        if (struct.state != null) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          struct.state.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onInterfaceActionStateChanged_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onInterfaceActionStateChanged_argsTupleScheme getScheme() {
        return new onInterfaceActionStateChanged_argsTupleScheme();
      }
    }

    private static class onInterfaceActionStateChanged_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onInterfaceActionStateChanged_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onInterfaceActionStateChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTurretName()) {
          optionals.set(0);
        }
        if (struct.isSetApiName()) {
          optionals.set(1);
        }
        if (struct.isSetState()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTurretName()) {
          oprot.writeString(struct.turretName);
        }
        if (struct.isSetApiName()) {
          oprot.writeString(struct.apiName);
        }
        if (struct.isSetState()) {
          struct.state.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onInterfaceActionStateChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.turretName = iprot.readString();
          struct.setTurretNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.apiName = iprot.readString();
          struct.setApiNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.state = new InterfaceActionState();
          struct.state.read(iprot);
          struct.setStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class onInterfaceActionKeyChanged_args implements org.apache.thrift.TBase<onInterfaceActionKeyChanged_args, onInterfaceActionKeyChanged_args._Fields>, java.io.Serializable, Cloneable, Comparable<onInterfaceActionKeyChanged_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onInterfaceActionKeyChanged_args");

    private static final org.apache.thrift.protocol.TField TURRET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("turretName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField API_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("apiName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("keyState", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onInterfaceActionKeyChanged_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onInterfaceActionKeyChanged_argsTupleSchemeFactory();

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String turretName; // required
    /**
     * Identifier of the interface action
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String apiName; // required
    /**
     * The key event
     * 
     * @see InterfaceActionKeyState
     */
    public @org.apache.thrift.annotation.Nullable InterfaceActionKeyState keyState; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Identifier of the turret specified at notification subscription.
       * It's an empty string if no name was specified at subscription.
       */
      TURRET_NAME((short)1, "turretName"),
      /**
       * Identifier of the interface action
       */
      API_NAME((short)2, "apiName"),
      /**
       * The key event
       * 
       * @see InterfaceActionKeyState
       */
      KEY_STATE((short)3, "keyState");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TURRET_NAME
            return TURRET_NAME;
          case 2: // API_NAME
            return API_NAME;
          case 3: // KEY_STATE
            return KEY_STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TURRET_NAME, new org.apache.thrift.meta_data.FieldMetaData("turretName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.API_NAME, new org.apache.thrift.meta_data.FieldMetaData("apiName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY_STATE, new org.apache.thrift.meta_data.FieldMetaData("keyState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, InterfaceActionKeyState.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onInterfaceActionKeyChanged_args.class, metaDataMap);
    }

    public onInterfaceActionKeyChanged_args() {
    }

    public onInterfaceActionKeyChanged_args(
      java.lang.String turretName,
      java.lang.String apiName,
      InterfaceActionKeyState keyState)
    {
      this();
      this.turretName = turretName;
      this.apiName = apiName;
      this.keyState = keyState;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onInterfaceActionKeyChanged_args(onInterfaceActionKeyChanged_args other) {
      if (other.isSetTurretName()) {
        this.turretName = other.turretName;
      }
      if (other.isSetApiName()) {
        this.apiName = other.apiName;
      }
      if (other.isSetKeyState()) {
        this.keyState = other.keyState;
      }
    }

    @Override
    public onInterfaceActionKeyChanged_args deepCopy() {
      return new onInterfaceActionKeyChanged_args(this);
    }

    @Override
    public void clear() {
      this.turretName = null;
      this.apiName = null;
      this.keyState = null;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTurretName() {
      return this.turretName;
    }

    /**
     * Identifier of the turret specified at notification subscription.
     * It's an empty string if no name was specified at subscription.
     */
    public onInterfaceActionKeyChanged_args setTurretName(@org.apache.thrift.annotation.Nullable java.lang.String turretName) {
      this.turretName = turretName;
      return this;
    }

    public void unsetTurretName() {
      this.turretName = null;
    }

    /** Returns true if field turretName is set (has been assigned a value) and false otherwise */
    public boolean isSetTurretName() {
      return this.turretName != null;
    }

    public void setTurretNameIsSet(boolean value) {
      if (!value) {
        this.turretName = null;
      }
    }

    /**
     * Identifier of the interface action
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getApiName() {
      return this.apiName;
    }

    /**
     * Identifier of the interface action
     */
    public onInterfaceActionKeyChanged_args setApiName(@org.apache.thrift.annotation.Nullable java.lang.String apiName) {
      this.apiName = apiName;
      return this;
    }

    public void unsetApiName() {
      this.apiName = null;
    }

    /** Returns true if field apiName is set (has been assigned a value) and false otherwise */
    public boolean isSetApiName() {
      return this.apiName != null;
    }

    public void setApiNameIsSet(boolean value) {
      if (!value) {
        this.apiName = null;
      }
    }

    /**
     * The key event
     * 
     * @see InterfaceActionKeyState
     */
    @org.apache.thrift.annotation.Nullable
    public InterfaceActionKeyState getKeyState() {
      return this.keyState;
    }

    /**
     * The key event
     * 
     * @see InterfaceActionKeyState
     */
    public onInterfaceActionKeyChanged_args setKeyState(@org.apache.thrift.annotation.Nullable InterfaceActionKeyState keyState) {
      this.keyState = keyState;
      return this;
    }

    public void unsetKeyState() {
      this.keyState = null;
    }

    /** Returns true if field keyState is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyState() {
      return this.keyState != null;
    }

    public void setKeyStateIsSet(boolean value) {
      if (!value) {
        this.keyState = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TURRET_NAME:
        if (value == null) {
          unsetTurretName();
        } else {
          setTurretName((java.lang.String)value);
        }
        break;

      case API_NAME:
        if (value == null) {
          unsetApiName();
        } else {
          setApiName((java.lang.String)value);
        }
        break;

      case KEY_STATE:
        if (value == null) {
          unsetKeyState();
        } else {
          setKeyState((InterfaceActionKeyState)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TURRET_NAME:
        return getTurretName();

      case API_NAME:
        return getApiName();

      case KEY_STATE:
        return getKeyState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TURRET_NAME:
        return isSetTurretName();
      case API_NAME:
        return isSetApiName();
      case KEY_STATE:
        return isSetKeyState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof onInterfaceActionKeyChanged_args)
        return this.equals((onInterfaceActionKeyChanged_args)that);
      return false;
    }

    public boolean equals(onInterfaceActionKeyChanged_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_turretName = true && this.isSetTurretName();
      boolean that_present_turretName = true && that.isSetTurretName();
      if (this_present_turretName || that_present_turretName) {
        if (!(this_present_turretName && that_present_turretName))
          return false;
        if (!this.turretName.equals(that.turretName))
          return false;
      }

      boolean this_present_apiName = true && this.isSetApiName();
      boolean that_present_apiName = true && that.isSetApiName();
      if (this_present_apiName || that_present_apiName) {
        if (!(this_present_apiName && that_present_apiName))
          return false;
        if (!this.apiName.equals(that.apiName))
          return false;
      }

      boolean this_present_keyState = true && this.isSetKeyState();
      boolean that_present_keyState = true && that.isSetKeyState();
      if (this_present_keyState || that_present_keyState) {
        if (!(this_present_keyState && that_present_keyState))
          return false;
        if (!this.keyState.equals(that.keyState))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTurretName()) ? 131071 : 524287);
      if (isSetTurretName())
        hashCode = hashCode * 8191 + turretName.hashCode();

      hashCode = hashCode * 8191 + ((isSetApiName()) ? 131071 : 524287);
      if (isSetApiName())
        hashCode = hashCode * 8191 + apiName.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeyState()) ? 131071 : 524287);
      if (isSetKeyState())
        hashCode = hashCode * 8191 + keyState.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(onInterfaceActionKeyChanged_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTurretName(), other.isSetTurretName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTurretName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turretName, other.turretName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetApiName(), other.isSetApiName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiName, other.apiName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetKeyState(), other.isSetKeyState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyState, other.keyState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onInterfaceActionKeyChanged_args(");
      boolean first = true;

      sb.append("turretName:");
      if (this.turretName == null) {
        sb.append("null");
      } else {
        sb.append(this.turretName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apiName:");
      if (this.apiName == null) {
        sb.append("null");
      } else {
        sb.append(this.apiName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyState:");
      if (this.keyState == null) {
        sb.append("null");
      } else {
        sb.append(this.keyState);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onInterfaceActionKeyChanged_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onInterfaceActionKeyChanged_argsStandardScheme getScheme() {
        return new onInterfaceActionKeyChanged_argsStandardScheme();
      }
    }

    private static class onInterfaceActionKeyChanged_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onInterfaceActionKeyChanged_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, onInterfaceActionKeyChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TURRET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.turretName = iprot.readString();
                struct.setTurretNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // API_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apiName = iprot.readString();
                struct.setApiNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.keyState = com.unify.osx.turret.api.InterfaceActionKeyState.findByValue(iprot.readI32());
                struct.setKeyStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, onInterfaceActionKeyChanged_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.turretName != null) {
          oprot.writeFieldBegin(TURRET_NAME_FIELD_DESC);
          oprot.writeString(struct.turretName);
          oprot.writeFieldEnd();
        }
        if (struct.apiName != null) {
          oprot.writeFieldBegin(API_NAME_FIELD_DESC);
          oprot.writeString(struct.apiName);
          oprot.writeFieldEnd();
        }
        if (struct.keyState != null) {
          oprot.writeFieldBegin(KEY_STATE_FIELD_DESC);
          oprot.writeI32(struct.keyState.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onInterfaceActionKeyChanged_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public onInterfaceActionKeyChanged_argsTupleScheme getScheme() {
        return new onInterfaceActionKeyChanged_argsTupleScheme();
      }
    }

    private static class onInterfaceActionKeyChanged_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onInterfaceActionKeyChanged_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onInterfaceActionKeyChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTurretName()) {
          optionals.set(0);
        }
        if (struct.isSetApiName()) {
          optionals.set(1);
        }
        if (struct.isSetKeyState()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTurretName()) {
          oprot.writeString(struct.turretName);
        }
        if (struct.isSetApiName()) {
          oprot.writeString(struct.apiName);
        }
        if (struct.isSetKeyState()) {
          oprot.writeI32(struct.keyState.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onInterfaceActionKeyChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.turretName = iprot.readString();
          struct.setTurretNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.apiName = iprot.readString();
          struct.setApiNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.keyState = com.unify.osx.turret.api.InterfaceActionKeyState.findByValue(iprot.readI32());
          struct.setKeyStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
